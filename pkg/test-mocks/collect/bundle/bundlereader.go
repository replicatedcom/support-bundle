// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedcom/support-bundle/pkg/collect/bundle/reader (interfaces: BundleReader)

// Package bundle is a generated GoMock package.
package bundle

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/replicatedcom/support-bundle/pkg/collect/types"
	meta "github.com/replicatedcom/support-bundle/pkg/meta"
)

// MockBundleReader is a mock of BundleReader interface
type MockBundleReader struct {
	ctrl     *gomock.Controller
	recorder *MockBundleReaderMockRecorder
}

// MockBundleReaderMockRecorder is the mock recorder for MockBundleReader
type MockBundleReaderMockRecorder struct {
	mock *MockBundleReader
}

// NewMockBundleReader creates a new mock instance
func NewMockBundleReader(ctrl *gomock.Controller) *MockBundleReader {
	mock := &MockBundleReader{ctrl: ctrl}
	mock.recorder = &MockBundleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBundleReader) EXPECT() *MockBundleReaderMockRecorder {
	return m.recorder
}

// GetErrorIndex mocks base method
func (m *MockBundleReader) GetErrorIndex() []types.Result {
	ret := m.ctrl.Call(m, "GetErrorIndex")
	ret0, _ := ret[0].([]types.Result)
	return ret0
}

// GetErrorIndex indicates an expected call of GetErrorIndex
func (mr *MockBundleReaderMockRecorder) GetErrorIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorIndex", reflect.TypeOf((*MockBundleReader)(nil).GetErrorIndex))
}

// GetIndex mocks base method
func (m *MockBundleReader) GetIndex() []types.Result {
	ret := m.ctrl.Call(m, "GetIndex")
	ret0, _ := ret[0].([]types.Result)
	return ret0
}

// GetIndex indicates an expected call of GetIndex
func (mr *MockBundleReaderMockRecorder) GetIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockBundleReader)(nil).GetIndex))
}

// Open mocks base method
func (m *MockBundleReader) Open(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockBundleReaderMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBundleReader)(nil).Open), arg0)
}

// ReaderFromRef mocks base method
func (m *MockBundleReader) ReaderFromRef(arg0 meta.Ref) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "ReaderFromRef", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReaderFromRef indicates an expected call of ReaderFromRef
func (mr *MockBundleReaderMockRecorder) ReaderFromRef(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReaderFromRef", reflect.TypeOf((*MockBundleReader)(nil).ReaderFromRef), arg0)
}

// ResultsFromRef mocks base method
func (m *MockBundleReader) ResultsFromRef(arg0 meta.Ref) []types.Result {
	ret := m.ctrl.Call(m, "ResultsFromRef", arg0)
	ret0, _ := ret[0].([]types.Result)
	return ret0
}

// ResultsFromRef indicates an expected call of ResultsFromRef
func (mr *MockBundleReaderMockRecorder) ResultsFromRef(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultsFromRef", reflect.TypeOf((*MockBundleReader)(nil).ResultsFromRef), arg0)
}
