package pipeline

import (
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"regexp"
	"strings"
	"testing"
	"text/template"

	"github.com/stretchr/testify/assert"

	"github.com/stretchr/testify/require"
)

func TestPipeline(t *testing.T) {
	parser := Parser{
		Parse: func(r io.Reader) (interface{}, error) {
			m := map[string]string{}
			dec := json.NewDecoder(r)
			err := dec.Decode(&m)
			return m, err
		},
	}

	tmpl, err := template.New("tester").Parse(`A: {{.a}}
B: {{.b}}
C: {{.c}}`)
	require.NoError(t, err)

	humanifier := Humanifier{tmpl}

	// TODO jsonifier := Jsonifier{}
	// TODO tee?

	scrubber := LineScrubber{
		Scrubber: func(b []byte) []byte {
			return regexp.MustCompile("BBB").ReplaceAll(b, []byte("xxx"))
		},
	}

	b := Banzai{
		Pipeline: []Pipe{
			parser.Pipe,
			humanifier.Pipe,
			scrubber.Pipe,
		},
	}
	s, err := b.Pipe(context.Background(), RawSource(strings.NewReader(`{"a":"AAA","b":"BBB","c":"CCC"}`)))
	require.NoError(t, err)

	out, err := ioutil.ReadAll(s.(HumanSource))
	require.NoError(t, err)
	assert.Equal(t, `A: AAA
B: xxx
C: CCC
`, string(out))
}
