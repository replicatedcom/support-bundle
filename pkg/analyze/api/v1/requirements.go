// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/requirements/docker_version.yml
// pkg/analyze/api/v1/requirements/file_matches.yml
// pkg/analyze/api/v1/requirements/kubernetes_total_memory.yml
// pkg/analyze/api/v1/requirements/kubernetes_version.yml
// pkg/analyze/api/v1/requirements/selinux_notenforcing.yml
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _requirementsDocker_versionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x3f\x6f\xe2\x40\x10\xc5\x7b\x3e\xc5\x93\x1b\x2a\xac\xab\x5d\x5c\x73\x7f\x3a\xa4\xd3\x11\x45\x4a\x85\x16\xfc\x80\x25\xde\x5d\x33\x3b\x76\x12\x19\x7f\xf7\xc8\x98\x2c\x0a\x0a\x4a\x8a\xb8\xf2\xce\xbc\xf7\x66\xf6\xb7\x62\x9e\x8a\x09\xb0\x0e\xbe\xb4\x6a\x83\x8f\xc3\x09\x98\x81\xad\xa9\xc6\xff\xe1\x0b\x35\xc5\x68\x90\x02\xc6\x97\xa9\x1a\xd5\x28\x1d\xbd\xc6\x8b\x72\xf0\x4e\xbb\x4e\x58\x57\xc8\xff\xb8\x5a\x5f\xfa\x7e\x9a\xba\xad\x11\x6b\x56\x15\xaf\x0c\x27\x5d\x91\x7c\x3e\x28\xf2\xe5\x7f\x6e\x2e\xd6\xc8\x96\x62\x07\x11\x45\x82\x9c\xab\x36\x2e\x6b\x61\x5a\xbe\x80\x4a\xc3\x73\xcf\x31\x46\xb3\x65\x81\x9f\xb3\x34\xeb\xaf\xb1\x15\x4b\x68\x40\x49\xe5\x5a\xf1\x3b\xac\x1f\x29\x68\x29\xd1\x06\xff\x8d\x57\x2f\x4f\xc1\x0b\x4a\x4b\xb9\x1f\xd3\x7f\x05\x57\x1b\x21\xf2\x54\x45\xd6\x75\x5d\xfe\x4e\x34\xb7\xbe\xef\xfb\x0c\x47\x6c\x89\x1f\x5f\x40\x97\xdc\x17\x7c\xfb\xc3\x48\x0f\x59\x7e\x4e\x1d\xf2\xf6\x87\xf9\x48\x24\xde\x85\x85\x8a\xf5\x5b\x1c\xa1\x62\xdd\x3f\xe1\xc6\x3e\x23\x6b\xb3\xcf\x70\x7f\x84\xf4\x21\x34\x72\x85\x11\x6f\xcf\x9f\x76\xeb\x7b\xd8\x88\x8a\x31\x42\x77\xc6\x43\x77\x84\xb3\xde\xba\xc6\xa5\x20\xe1\xa1\xb1\xc2\x32\xa5\x84\x0d\x6e\xe0\x99\xa4\x45\xae\x06\xbb\x26\x2a\x56\x84\x51\x54\x34\x51\x6f\x06\xbc\x06\x00\x00\xff\xff\x2d\xa6\x2e\xbc\xf7\x02\x00\x00")

func requirementsDocker_versionYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsDocker_versionYml,
		"requirements/docker_version.yml",
	)
}

func requirementsDocker_versionYml() (*asset, error) {
	bytes, err := requirementsDocker_versionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/docker_version.yml", size: 759, mode: os.FileMode(420), modTime: time.Unix(1554846383, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsFile_matchesYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xb1\x6e\xf3\x30\x0c\x84\xf7\x3c\x05\xe1\x25\x53\xf2\x00\x1e\xfe\xed\xef\x96\x25\xe8\x1e\xa8\xc9\x39\x11\x20\x4b\x2e\x29\xa7\x29\x54\xbd\x7b\x41\x29\xb0\x03\x23\x43\x86\x7a\x92\xc9\xbb\x23\xf9\xb1\xf9\x6a\x57\x44\xc7\xe0\x4f\x36\xda\xe0\x45\xff\x88\x36\x84\xab\x71\xf5\xad\x5f\x18\xc0\x26\x06\x6e\xc9\xf8\xd3\x54\x95\x68\x22\x7a\xf8\x28\xb3\x52\xbd\xeb\x94\x18\x83\xa3\xed\xff\x7e\x88\xdf\x39\xaf\xa7\xee\xd5\xb0\x35\x1f\x0e\x0b\xc3\x1e\x5d\x3b\xbb\x0e\x7b\x74\x8f\x26\x55\x94\xa4\x59\xe3\x43\x5c\xea\x04\x57\xb0\x55\x11\x98\x03\xdf\xab\x56\x0e\x03\x63\x3a\xaf\xa5\xc8\x23\xee\xbd\x1e\x22\xe6\x8c\x96\xfe\x6d\xa6\x59\x6f\xd6\xa1\xa4\x77\x61\xbc\x5f\xfa\x47\x2c\x76\x26\x1e\x2f\xf4\x43\xf8\xa4\x46\x97\x68\x5e\xe2\x72\xc6\xad\x5c\x9d\xb6\xe5\x9d\x97\x5c\x4a\xea\xcc\x85\x55\x54\x27\x55\xc3\x6b\x94\x9e\x91\x48\x29\xd9\xae\x82\xde\xd5\x76\xce\xb9\xe0\xe9\x35\x1f\xa2\xc3\x46\x67\x98\x70\x1b\x18\x22\x36\xf8\x94\x12\x9c\xa8\x50\x37\x9e\x6d\x5a\xf7\xa7\x9c\xf3\x6a\x9a\xf4\x7e\x01\x75\x25\x6d\x94\x58\x23\x29\x5e\xf0\x24\x94\x9a\xc7\xf3\x9b\xd5\x6f\x00\x00\x00\xff\xff\xe8\xe7\xce\xd3\xb3\x02\x00\x00")

func requirementsFile_matchesYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsFile_matchesYml,
		"requirements/file_matches.yml",
	)
}

func requirementsFile_matchesYml() (*asset, error) {
	bytes, err := requirementsFile_matchesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/file_matches.yml", size: 691, mode: os.FileMode(420), modTime: time.Unix(1554846335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsKubernetes_total_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xbf\x6e\xdb\x7c\x0c\xdc\xf3\x14\x07\x2f\xf9\x32\x44\x0f\xa0\xe1\x1b\x02\xb4\x4b\x91\xa1\x4d\xb6\xa2\x08\x68\x89\x4e\x18\xfc\xfe\xc8\x24\x7f\x2e\x04\x59\xef\x5e\xc8\x72\x24\x37\x68\xd1\x0e\xd5\x24\x92\x77\xba\xe3\x51\x4a\xdf\xeb\x2b\xa0\xc9\xa9\x15\x97\x9c\x6c\xaa\x80\x5b\xf0\x81\xc2\xfc\x3e\x3d\xb9\x63\x25\xcf\x5a\x83\x52\xbb\x74\xcd\xc9\x39\x72\x72\x5b\x91\x13\xf7\x7a\x18\x94\xbb\x80\xea\x43\xec\xbc\x1f\xc7\xeb\x65\x7a\x20\x15\xda\x06\x7e\x47\x38\xe1\xea\x85\x97\xb2\xa3\x7a\xfa\xc2\xbb\x95\x6a\x7c\x60\x95\x09\xc4\xaa\x59\xcf\x5d\xb1\xa7\x4e\x79\x31\x5f\xc3\xb5\xf0\x79\x16\xd9\x8c\x9e\xb9\xc6\xff\xb7\x8b\xd6\x47\x92\xc0\x2d\x3c\xa3\x65\xe7\xc6\xf1\xa9\x6c\x59\x13\x3b\x1b\x3c\x3b\x05\x44\x8e\x59\xfb\x7f\x98\x41\x70\xfc\x47\x9e\x05\xd5\xfd\xe9\xd3\x37\x4b\x29\xe9\xe6\x2f\xa2\x99\x59\x6b\x36\xaf\xfb\x39\x1a\x6c\x2a\x71\x8e\xf6\xf5\x5b\x35\x59\x28\x56\x35\xd4\x51\x23\xde\x57\xf3\x0e\x1b\x1c\xf1\xba\xbf\x9f\x53\xb0\xc7\xfc\xe0\x2a\xe9\xf9\x21\x48\xc3\x38\xc2\x4a\xfc\x5c\x28\xb9\xb8\xb0\x5d\xda\x38\x69\x4a\x5a\x05\x3b\x52\xe3\x33\xb6\xc7\x66\x18\x86\xc9\xfa\x38\x8e\x9b\x3f\x5d\xe7\x57\x17\x78\xbc\x48\x19\xbb\xac\xe8\x73\xd1\xcb\x33\x34\xa1\x98\xb3\xe2\xac\xfe\x2e\xbb\xe3\xc4\x89\xe4\x6f\x7e\xc6\xf1\x0e\x62\x08\x6c\x06\x7f\xa1\x04\x7f\x61\x44\x49\x12\x4b\x5c\x34\x95\xf7\x45\x94\xdb\x37\xd9\xbc\xc3\xba\xc5\xdd\xd5\x62\xf3\x37\x3f\x03\x62\x31\xc7\x96\x41\x8e\xc0\x64\xfe\x13\x1b\x3f\x02\x00\x00\xff\xff\x06\x98\xd7\x0d\x42\x03\x00\x00")

func requirementsKubernetes_total_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsKubernetes_total_memoryYml,
		"requirements/kubernetes_total_memory.yml",
	)
}

func requirementsKubernetes_total_memoryYml() (*asset, error) {
	bytes, err := requirementsKubernetes_total_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/kubernetes_total_memory.yml", size: 834, mode: os.FileMode(420), modTime: time.Unix(1554846390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsKubernetes_versionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x3f\x6f\xd4\x40\x10\xc5\xfb\x7c\x8a\x27\x37\x81\x22\x16\xb5\x0b\x1a\x04\x0d\x8a\x84\x08\x42\xa2\x8a\xf6\xe2\x77\x97\x89\xbc\xbb\xbe\x99\xb1\x01\xf9\xfc\xdd\x91\x63\xb3\x27\x85\x93\xa0\xc0\xd5\x78\xde\xbc\xf9\xf3\x5b\x0d\xdf\x9b\x2b\xe0\x21\xa7\x56\x5c\x72\xb2\xe5\x0f\xb8\x01\xc7\xd0\xad\xf1\xf2\xe5\x9e\x1a\x3c\x6b\x83\x90\xda\x92\x35\x0f\xce\xc8\xe4\x76\xae\x5c\xbc\xd7\xd3\xa4\xec\x3b\xd4\xef\x63\xef\x3f\xe7\xf9\xba\xa8\x63\x50\x09\xbb\x8e\x2f\x0c\xcf\x75\x4d\xf1\xa5\xec\xa8\xef\x3f\x73\x7f\xb6\x1a\x47\xaa\x2c\x45\x54\xcd\xba\x65\xc5\xee\x7b\x65\x59\xbe\x81\xeb\xc0\x4d\x8b\x34\x0b\x07\x36\x78\x7b\x53\x66\x7d\x08\xd2\xb1\x85\x67\xb4\x74\x3e\x38\x3e\x0e\x3b\x6a\xa2\xd3\x30\x52\x4d\x72\xfa\x8f\xe7\x1b\xe3\x48\x45\x35\x4d\x53\x7d\xf7\x1c\xdf\x4a\x9a\xe7\xb9\xc2\x09\xaf\x36\x71\x13\x5e\xd7\xef\x72\xec\x83\x12\x27\x1c\x88\x37\xff\xc0\x6c\x35\x9e\xa1\x3d\x1d\x57\x66\xa8\xea\x83\xf8\xd7\xf5\x9a\x65\xd4\xd3\xf1\x76\x45\x61\x5f\xf2\x9d\xab\xa4\x03\x4e\x70\x95\xf8\x49\xb9\x97\x1f\xa8\xc6\xea\x6f\x9c\x2f\xb1\xfc\x96\x07\xbd\xc0\x0f\xbf\xdf\x7e\xdd\x6f\x9e\x21\x86\x8e\x66\xf0\xc7\x90\xe0\x8f\x44\x94\x24\x71\x88\xa5\x93\xf2\x38\x88\xb2\x2d\x2d\xf2\x1e\x2f\x99\x5d\x95\x15\x2e\x8c\x8c\x83\x39\x76\x44\x70\x74\x0c\xe6\x7f\xba\x7f\x05\x00\x00\xff\xff\xf3\xf5\x58\x55\xe7\x02\x00\x00")

func requirementsKubernetes_versionYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsKubernetes_versionYml,
		"requirements/kubernetes_version.yml",
	)
}

func requirementsKubernetes_versionYml() (*asset, error) {
	bytes, err := requirementsKubernetes_versionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/kubernetes_version.yml", size: 743, mode: os.FileMode(420), modTime: time.Unix(1554846393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsSelinux_notenforcingYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x6a\xdc\x30\x10\xbd\xef\x57\x0c\xa6\x90\x84\x10\x1f\x7a\xf4\xa1\x3d\x94\xe4\xd4\x42\xe9\xf6\x18\x1a\x14\xeb\x65\x3d\x20\x4b\xea\xcc\xd8\x4d\x48\xf3\xef\x45\x76\xa2\x2d\xdb\x85\xb6\x10\x9f\xe4\x99\xf7\xe6\xbd\x79\x92\xb8\x1f\xdd\x86\xa8\x4f\xd1\xb3\x71\x8a\x5a\xfe\x88\x2e\x08\xb3\x0b\xeb\xb9\x7c\x29\x43\x9c\x25\xe9\xc8\x45\x5f\xab\x6a\xce\x30\x22\x9a\xee\x91\x85\x7b\xf2\xf8\x28\xc8\x81\xda\xcb\x31\xdb\xc3\xd3\xd3\x49\xed\xce\x4e\xd8\xdd\x06\x1c\x10\x16\x5c\x57\x79\x31\x19\xb5\x37\x5f\x70\xb7\xa7\x2a\x66\x08\x17\x10\x44\x92\x3c\x57\x59\x6f\xb2\xa0\x9a\xef\xc8\x64\xc2\x73\x6f\x84\xaa\xdb\xa1\xa3\x77\x17\x55\xeb\xca\x71\x80\x27\x4b\xe4\x61\xe8\x8d\xb6\x97\x1f\x39\x4e\xf7\x34\x26\x8f\x57\x5c\x1c\xdf\xa9\xdd\x9a\xb3\x49\xa9\x41\x2c\x0b\xfb\xe6\xf7\x18\x0e\xb1\x9f\x92\x47\x41\xde\x25\xe9\x39\xee\x9a\x7f\x88\x6c\x1d\xbf\xcf\x4c\xb0\xc3\xfd\x36\x07\x36\x6a\xba\xeb\x6b\x3d\x6f\xe8\x74\xa9\x5d\x71\xf4\xd4\x9c\xbe\x1f\xcf\xbe\xbd\x6c\xab\x2b\xb7\x3d\x7f\xd3\xac\x39\x9f\xd1\x5b\xfa\x49\xc1\xa9\x1d\xba\x2c\xce\xfe\x4f\xe4\xc3\x24\x82\x68\x4b\xa4\x7f\x91\x38\x7e\xa9\xc7\x2e\xee\xc5\x39\x2b\x71\xa4\x1a\xd4\x22\xd2\xd2\xd7\x81\x75\x39\x96\x7e\xbf\xea\x87\x07\x9a\xa2\x4e\x39\x27\x31\xf8\x96\x3e\x07\x38\x05\x81\x6d\x80\x90\x67\x2d\x99\xd6\xb9\x49\xa8\x1f\x5c\xdc\x81\x6c\xc0\x3a\xca\x12\x65\xc8\xc8\xaa\x3c\xa3\xdd\x54\x57\xf5\xc9\x4c\x6a\xcb\x4b\xbd\xc5\x9f\x9e\x36\xbf\x02\x00\x00\xff\xff\x47\x4f\xee\x26\x58\x03\x00\x00")

func requirementsSelinux_notenforcingYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsSelinux_notenforcingYml,
		"requirements/selinux_notenforcing.yml",
	)
}

func requirementsSelinux_notenforcingYml() (*asset, error) {
	bytes, err := requirementsSelinux_notenforcingYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/selinux_notenforcing.yml", size: 856, mode: os.FileMode(420), modTime: time.Unix(1554846396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"requirements/docker_version.yml":          requirementsDocker_versionYml,
	"requirements/file_matches.yml":            requirementsFile_matchesYml,
	"requirements/kubernetes_total_memory.yml": requirementsKubernetes_total_memoryYml,
	"requirements/kubernetes_version.yml":      requirementsKubernetes_versionYml,
	"requirements/selinux_notenforcing.yml":    requirementsSelinux_notenforcingYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"requirements": &bintree{nil, map[string]*bintree{
		"docker_version.yml":          &bintree{requirementsDocker_versionYml, map[string]*bintree{}},
		"file_matches.yml":            &bintree{requirementsFile_matchesYml, map[string]*bintree{}},
		"kubernetes_total_memory.yml": &bintree{requirementsKubernetes_total_memoryYml, map[string]*bintree{}},
		"kubernetes_version.yml":      &bintree{requirementsKubernetes_versionYml, map[string]*bintree{}},
		"selinux_notenforcing.yml":    &bintree{requirementsSelinux_notenforcingYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
