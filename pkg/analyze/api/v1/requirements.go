// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/requirements/docker_version.yml
// pkg/analyze/api/v1/requirements/kubernetes_total_memory.yml
// pkg/analyze/api/v1/requirements/kubernetes_version.yml
// pkg/analyze/api/v1/requirements/selinux_notenforcing.yml
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _requirementsDocker_versionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x4f\xea\x40\x14\x85\xf7\xfc\x8a\x93\x6e\x58\xd1\xbc\x75\x17\x6f\xf3\x9e\xee\x48\x8c\x18\x13\x57\x66\xa0\x07\x18\xec\xcc\x94\x3b\xb7\x55\x53\xfa\xdf\x4d\x29\x0e\x91\x84\xc4\x18\xbb\x6a\x6f\xcf\xf9\x7a\xfb\x8d\x98\xd7\x62\x02\xac\x82\x2f\xad\xda\xe0\xe3\xf0\x04\xcc\xc0\xd6\x54\xe3\xfd\x70\x85\x9a\x62\x34\x48\x01\xe3\xcb\x34\x8d\x6a\x94\x8e\x5e\xe3\x39\x39\x74\xa7\x5d\x27\xac\x2b\xe4\x37\xae\xd6\xf7\xbe\x9f\xa6\xb7\xad\x11\x6b\x96\x15\x2f\x0a\xc7\x5c\x91\x7a\x3e\x28\xf2\xe7\x7b\xae\xcf\xd5\xc8\x96\x62\x87\x10\x45\x82\x9c\xa6\x8e\x31\x9a\x0d\x0b\xfc\x9d\x25\xde\xad\xb1\x15\x4b\x68\x40\x49\xe5\x4a\xf1\x3f\xac\x5e\x28\x68\x29\xd1\x06\xff\x8b\xbf\x57\x1e\xc1\x0b\x4a\x4b\x79\x1c\xe9\xff\x82\xab\x8d\x10\x79\x9a\x22\xeb\xba\x2e\xff\x12\x9a\x5b\xdf\xf7\x7d\x86\x03\x36\xc4\x9f\x6f\xe8\x49\xed\xb3\xa2\xdd\x7e\x34\x84\x2c\x3f\x51\x07\xde\x6e\x3f\x1f\x8d\xc4\x87\xb0\x50\xb1\x7e\x83\x03\x54\xac\xbb\x13\xae\xed\x1b\xb2\x36\xfb\x89\xd2\xa7\xd0\xc8\x85\x46\x7c\x1e\x71\xda\xad\xef\x61\x23\x2a\xc6\x08\xdd\x1a\x0f\xdd\x12\xce\x7a\xeb\x1a\x97\x40\xc2\x7d\x63\x85\x65\xa2\x84\x35\xae\xe8\x99\xa4\x45\x2e\x3e\xec\x9a\xa8\x58\x12\x46\x51\xd1\x44\xbd\x0a\xf8\x08\x00\x00\xff\xff\x89\x69\xb4\xb6\xdb\x02\x00\x00")

func requirementsDocker_versionYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsDocker_versionYml,
		"requirements/docker_version.yml",
	)
}

func requirementsDocker_versionYml() (*asset, error) {
	bytes, err := requirementsDocker_versionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/docker_version.yml", size: 731, mode: os.FileMode(420), modTime: time.Unix(1534909534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsKubernetes_total_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xbd\x6e\xdb\x60\x0c\xdc\xf3\x14\x07\x2f\x69\x86\xe8\x01\x34\x74\x08\xd0\x2e\x45\x86\x36\xd9\x8a\xa2\xa0\x25\x3a\x61\xf0\xfd\xc8\x24\x3f\x17\x82\xac\x77\x2f\x64\x39\x92\x1b\xa0\x40\x51\x44\x93\x48\xdd\xf1\xee\x48\x29\xfd\xaa\xaf\x80\x26\xa7\x56\x5c\x72\xb2\xa9\x02\x6e\xc1\x07\x0a\xf3\xfb\xf4\xe4\x8e\x95\x3c\x6b\x0d\x4a\xed\xd2\x35\x27\xe7\xc8\xc9\x6d\x45\x4e\xdc\xeb\x61\x50\xee\x02\xaa\x4f\xb1\xf3\x7e\x1c\xaf\x97\xaf\x07\x52\xa1\x6d\xe0\x37\x84\x13\xae\x5e\x78\x29\x3b\xaa\x9f\xdf\x78\xb7\x52\x8d\x0f\xac\x32\x81\x58\x35\xeb\xb9\x1b\xd9\x8c\x9e\xb8\xc6\xc7\xdb\x65\xde\x67\x92\xc0\x2d\x3c\xa3\x65\xe7\xc6\xf1\xa5\x6c\x59\x13\x3b\x1b\x3c\x3b\x05\x44\x8e\x59\xfb\x77\xcc\x19\x1c\x1f\xc8\xb3\xa0\xba\x3f\x8d\xbe\x59\x4a\x49\x37\xff\x10\x7f\x66\xad\xf9\x5f\xf6\x73\x7c\x6c\x2a\x71\x8e\xf6\xfd\x47\x35\x59\x28\x56\x35\xd4\x51\x23\xde\x57\x73\x86\x0d\x8e\x78\xd9\xdf\xcf\x5b\xb0\xc7\xfc\xe0\x2a\xe9\xe9\x21\x48\xc3\x38\xc2\x4a\xfc\x5a\x28\xb9\xb8\xb0\x5d\xda\x38\x69\x4a\x5a\x05\x3b\x52\xe3\x33\xb6\xc7\x66\x18\x86\xc9\xfa\x38\x8e\x9b\xff\xb9\xc0\xe3\xc5\x96\xb1\xcb\x8a\x3e\x17\xbd\x3c\x43\x13\x8a\x39\x2b\xce\xea\x6f\x76\x77\x9c\x38\x91\xfc\xd5\xcf\x38\xde\x41\x0c\x81\xcd\xe0\xcf\x94\xe0\xcf\x8c\x28\x49\x62\x89\x8b\xa6\xf2\xbe\x88\x72\xfb\x2a\x9b\x77\x58\x53\xdc\x5d\x2d\x36\xff\xf2\x33\x20\x16\x73\x6c\x19\xe4\x08\x4c\xe6\x7f\xb0\xf1\x3b\x00\x00\xff\xff\xf0\x55\x7c\x9b\x26\x03\x00\x00")

func requirementsKubernetes_total_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsKubernetes_total_memoryYml,
		"requirements/kubernetes_total_memory.yml",
	)
}

func requirementsKubernetes_total_memoryYml() (*asset, error) {
	bytes, err := requirementsKubernetes_total_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/kubernetes_total_memory.yml", size: 806, mode: os.FileMode(420), modTime: time.Unix(1534909534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsKubernetes_versionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x31\x4f\xfb\x40\x0c\xc5\xf7\x7e\x8a\xa7\x2c\xfd\xff\x87\x46\xcc\x19\x58\x10\x2c\xa8\x12\xa2\x08\x89\x09\x5d\x9b\xd7\xf4\xaa\xdc\x5d\xea\x73\x02\x28\xcd\x77\x47\x69\x4a\x2a\x95\x0e\x08\x91\xc9\xb1\xfd\x9e\xed\xdf\x89\x79\xcb\x26\xc0\x2a\xf8\xdc\xaa\x0d\x3e\xf6\x7f\xc0\x0c\x6c\x4c\x39\xc4\xfd\x17\x2a\x8a\xd1\x20\x19\x8c\xcf\xc7\x6c\x54\xa3\x74\xf4\x1a\x4f\x9d\xbd\x76\xda\xb6\xc2\xaa\x44\x7a\xeb\x2a\xfd\xe8\xba\xe9\x58\x6d\x8c\x58\xb3\x2c\x79\x26\x38\xf4\x65\xa3\xce\x07\x45\xfa\xfa\xc8\xf5\x49\x1a\xd9\x50\x6c\xdf\x44\x91\x20\xc7\xac\x63\x8c\xa6\x60\x86\xeb\xd9\xe8\x77\x67\x6c\xc9\x1c\x1a\x90\x53\xb9\x52\xdc\xd7\x4b\x8a\xa7\x32\xa2\xa1\x44\x1b\xfc\x1f\x9e\x18\xe9\x1a\x0a\x92\xb6\x6d\xd3\xc5\x21\x9e\x5b\xdf\x75\x5d\x82\x3d\xfe\x1d\x8b\xc7\xc2\xff\xf4\x26\xb8\xca\x08\xb1\x47\x41\x5c\xfd\x80\xcb\x20\x3c\x81\xd9\xee\x06\x2e\x48\xd2\xc2\xea\xf3\x70\x4d\x3f\x6a\xbb\x9b\x0f\x28\xe2\x53\x58\xa8\x58\x5f\x60\x0f\x15\xeb\x1e\x84\x6b\xfb\x8e\xa4\x49\x7e\xc3\xf2\x25\xd4\x72\x81\x1f\xbe\xde\x77\xd8\xaf\xeb\x60\x23\x4a\xc6\x08\xdd\x18\x0f\xdd\x10\xce\x7a\xeb\x6a\x37\x3a\x09\x77\xb5\x15\xe6\xa3\x45\x58\xe3\x9c\xd9\x64\x5c\xe1\xc2\x48\x57\x47\xc5\x92\x30\x8a\x92\x26\xea\x77\xf5\x67\x00\x00\x00\xff\xff\x54\x30\x0e\x82\xcb\x02\x00\x00")

func requirementsKubernetes_versionYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsKubernetes_versionYml,
		"requirements/kubernetes_version.yml",
	)
}

func requirementsKubernetes_versionYml() (*asset, error) {
	bytes, err := requirementsKubernetes_versionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/kubernetes_version.yml", size: 715, mode: os.FileMode(420), modTime: time.Unix(1534909534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _requirementsSelinux_notenforcingYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x6e\xd4\x30\x10\xbd\xef\x57\x8c\x22\xa4\xb6\xaa\x9a\x03\xc7\x1c\xe0\x80\xda\x13\x48\x88\xe5\x58\x81\xdc\xf8\x35\x19\xc9\xb1\xc3\xcc\x24\x74\xb5\xec\xbf\x23\x27\xac\x17\x2d\x07\x16\x89\x9c\x9c\xf1\x7b\x33\xef\x3d\x8f\xb8\xef\xcd\x86\xa8\x4d\xd1\xb3\x71\x8a\x9a\xff\x88\xee\x08\xb3\x0b\xeb\x39\x7f\x69\x84\x38\x4b\xd2\x90\x8b\xbe\x54\xd5\x9c\x61\x40\x34\x3d\x21\x33\xf7\x6a\xbf\x17\x8c\x81\xea\xfb\x61\xb4\xdd\xe1\x70\x55\x6e\x67\x27\xec\x9e\x02\xce\x08\x0b\xae\x29\xbc\x98\x8c\xea\xaf\x9f\xf0\x7c\xa2\x2a\x66\x08\x67\x10\x44\x92\xfc\xaa\x0e\x50\x75\x1d\x1a\x7a\x73\x57\xfa\x3d\x38\x0e\xf0\x64\x89\x3c\x0c\xad\xd1\xf6\xfe\x3d\xc7\xe9\x85\x86\xe4\xf1\x1f\xcd\xe1\x1b\xd5\x5b\x73\x36\x29\x55\x88\xd9\x94\xaf\x7e\xb7\x7a\x8e\xfd\x90\x3c\x32\xf2\x39\x49\xcb\xb1\xab\x2e\x88\x65\x6d\x7f\xca\x45\xd0\xe1\x65\x3b\x06\x36\xaa\x9a\xc7\x47\xbd\xad\xe8\x7a\xa9\x3d\x70\xf4\x54\x5d\xbf\x1d\x6e\xbe\x1c\xdd\xea\xca\xad\x6f\x5f\x55\x6b\x96\x37\xf4\x9a\x7e\x50\x70\x6a\xe7\x2a\xb3\xb2\x7f\x1b\xf2\x6e\x12\x41\xb4\x25\xd2\xbf\x8c\xb8\xfc\xe1\x8e\xca\x59\x89\x23\x95\xa0\x96\x21\x35\x7d\xee\x59\x97\x63\xbe\x6f\xd7\xf9\x61\x47\x53\xd4\x69\x1c\x93\x18\x7c\x4d\x1f\x03\x9c\x82\xc0\xd6\x43\xc8\xb3\xe6\x4c\x4b\xdf\x24\xd4\xf6\x2e\x76\x20\xeb\xb1\xb6\xb2\x44\x23\x64\x60\x55\x9e\x51\x6f\x8a\xaa\xb2\x32\x93\xda\xb2\x8d\x4f\xf8\x53\xd3\xe6\x67\x00\x00\x00\xff\xff\x5a\x92\xa7\xc9\x3c\x03\x00\x00")

func requirementsSelinux_notenforcingYmlBytes() ([]byte, error) {
	return bindataRead(
		_requirementsSelinux_notenforcingYml,
		"requirements/selinux_notenforcing.yml",
	)
}

func requirementsSelinux_notenforcingYml() (*asset, error) {
	bytes, err := requirementsSelinux_notenforcingYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "requirements/selinux_notenforcing.yml", size: 828, mode: os.FileMode(420), modTime: time.Unix(1534910877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"requirements/docker_version.yml": requirementsDocker_versionYml,
	"requirements/kubernetes_total_memory.yml": requirementsKubernetes_total_memoryYml,
	"requirements/kubernetes_version.yml": requirementsKubernetes_versionYml,
	"requirements/selinux_notenforcing.yml": requirementsSelinux_notenforcingYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"requirements": &bintree{nil, map[string]*bintree{
		"docker_version.yml": &bintree{requirementsDocker_versionYml, map[string]*bintree{}},
		"kubernetes_total_memory.yml": &bintree{requirementsKubernetes_total_memoryYml, map[string]*bintree{}},
		"kubernetes_version.yml": &bintree{requirementsKubernetes_versionYml, map[string]*bintree{}},
		"selinux_notenforcing.yml": &bintree{requirementsSelinux_notenforcingYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

