// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/config_management.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfig_managementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x92\x31\x6f\xe3\x30\x0c\x85\xf7\xfc\x0a\x6e\x99\x92\xe0\x56\x8d\x77\xc0\x6d\x39\xdc\x10\x74\x67\x6c\x5a\x16\x60\x51\x02\x49\x07\x75\x8b\xfe\xf7\xc2\xb1\xdb\x28\x48\x80\x78\x68\xa7\x6a\xf0\xf0\x4c\x3d\x7d\x7c\x78\xc8\xd8\x0d\x2f\xe4\x56\x00\xa7\x5f\xe3\x17\x60\x03\x8c\x91\x1c\x64\x49\x15\xa9\x92\x6e\xab\xc4\x4d\xf0\x11\x19\x3d\x45\x62\xdb\xe6\x3e\x67\xb2\xf3\x34\x80\x90\x0f\x6a\x24\x4f\x28\x01\x8f\x1d\xa9\x9b\x7f\x6c\xa0\x09\x1d\xed\xd1\xaa\xf6\x43\x1a\x4f\x46\x6b\x1d\xd4\xd4\x60\xdf\xd9\xae\x4a\x31\x22\xd7\xba\xcb\xba\x53\xab\x53\x6f\x9f\xa3\x33\x86\xce\x42\x16\xaa\x12\xd7\xc1\x42\xe2\x8b\x1f\x27\x2b\xcd\x29\x66\x1b\x1c\xbc\xbe\x15\x9a\x50\x53\xd8\xdc\xf1\x10\xf2\xf4\x9c\x6f\x40\x27\xd9\xc1\x7a\x5a\x17\xd0\x13\x1b\xac\x57\xf7\x7d\x23\xa9\xa2\xbf\x6c\x5f\xbc\x74\x90\x9e\xae\x12\x90\x10\x51\x06\x07\xfb\x73\xa4\x35\xfc\x1e\xe0\x7f\x19\xe9\x78\x6a\x32\x0c\x9d\x83\x43\x1b\x14\x94\xe4\x44\x02\x41\x41\x7a\xe6\xc0\x1e\x70\xbe\x31\x51\x15\xf7\x94\x4e\x24\x61\x0c\x21\x70\x93\x6e\x61\xfe\x62\xa7\xf7\x69\xfe\xa5\xc5\x14\x9c\xac\x20\xc9\x8f\x48\x6a\x3a\xf6\x7e\x69\xb9\xaa\x96\x9a\x1f\x53\xad\x71\xd9\x4d\xd5\x05\x62\xfb\xa6\x62\xfd\xb9\xc4\xb9\xa8\x56\xe3\x3c\x4c\x44\x5f\xd5\xaa\x65\x08\xd7\x9d\x7a\x84\x31\x55\xea\x3d\x00\x00\xff\xff\x76\xfa\x12\xf6\xbf\x04\x00\x00")

func assetsConfig_managementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfig_managementYml,
		"assets/config_management.yml",
	)
}

func assetsConfig_managementYml() (*asset, error) {
	bytes, err := assetsConfig_managementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/config_management.yml", size: 1215, mode: os.FileMode(420), modTime: time.Unix(1555437571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\xcd\x4a\xc4\x30\x10\xc7\xef\x3e\xc5\xbc\x80\x82\xd7\xdc\x64\x55\x3c\x08\x0b\x56\xbd\x4f\xb7\xb3\x75\x20\x9d\xd4\x24\x5d\xa8\xe2\xbb\xcb\xca\xd2\x6d\xda\xd0\x6e\x21\xd8\x4b\x0f\xe9\xff\x8b\xf9\xa1\xa0\x6e\xbf\x48\x5d\x01\x1c\x6e\x8f\x5f\x80\x6b\x10\xac\x48\x81\x71\x37\x4d\xde\x88\x6f\xfe\x5e\x01\x2c\x95\xec\x3c\xd9\x77\xb4\x8c\xb9\x26\xa7\x4e\x3f\xfa\x96\xee\x09\xc0\x38\x05\xdf\x3f\xa7\x87\x9d\x91\x82\x3d\x1b\x39\x9b\x9c\xb7\x2c\xe5\xc6\x54\x35\x5a\x52\x3d\x23\x7d\x2a\x08\x9a\x8f\xdd\xfb\x5e\x7a\x45\xce\x61\xd9\x1f\xd0\xc5\xbf\xda\x26\xc8\xaa\x2d\x57\x68\x5b\x05\xdb\x0c\xd8\xc1\x5b\x18\x0b\x50\x90\x47\xd6\x0a\xb6\x35\x59\xf4\x2c\x25\x64\xad\xf3\x54\x45\xc5\x8e\x0e\x64\xd9\xb7\x0a\x58\xf6\x66\x5c\xfe\x88\xda\x4d\xb5\x8b\xf1\xcb\x16\x44\x0d\xe7\x15\x05\xe5\x4d\x39\x64\x86\xba\x66\xa1\x35\x98\x05\xcd\xe9\x98\xdd\x85\xb1\xd3\x17\x1b\x89\x53\x30\x5b\xb4\x20\x6a\x98\x61\xb6\x23\xf1\xdd\xa5\xfe\x95\x59\xd0\x9c\x8e\xd9\x86\xc4\x6f\xb3\x0b\x2f\x36\x12\xa7\x60\xb6\x68\x41\xd4\x30\xc3\xcc\x7e\x90\x5e\x83\x58\xaf\x37\x1d\xaf\x97\xa7\x87\xe7\x0b\x6f\x35\x90\xa6\x60\xb5\xa0\x3d\x22\x9f\xe1\x54\x50\xce\x28\x6b\x90\x0a\x9a\xd3\xb1\xba\x0f\x63\xa7\xef\x35\x12\xa7\xe0\xb5\x68\x41\xd4\x30\x64\xf6\x1b\x00\x00\xff\xff\xf6\x94\x3b\xb9\x87\x08\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2183, mode: os.FileMode(420), modTime: time.Unix(1555435321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/config_management.yml": assetsConfig_managementYml,
	"assets/os.yml": assetsOsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"config_management.yml": &bintree{assetsConfig_managementYml, map[string]*bintree{}},
		"os.yml": &bintree{assetsOsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

