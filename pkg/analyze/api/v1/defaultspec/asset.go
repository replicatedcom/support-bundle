// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/configManagement.yml
// pkg/analyze/api/v1/defaultspec/assets/cpuCores.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigmanagementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6b\xdc\x30\x10\x85\xef\xfd\x15\x73\x0b\xb4\xec\x6e\x7b\xd5\xb1\x81\x5e\x4a\x4a\x29\xa1\xd7\x32\x6b\x8d\xb5\x03\xf2\x48\x68\x64\x13\xf7\xd7\x17\xc5\x26\x96\x77\xd3\x5d\x43\x1b\x1d\x0c\x1e\x3d\xe9\x3d\xcd\x7c\x28\xe8\xc7\xdf\x64\xde\x01\x0c\x9f\xca\x17\x60\x07\x82\x1d\x19\x88\x29\x34\xa4\x4a\xba\x6f\x82\xb4\xec\x3a\x14\x74\xd4\x91\xe4\x7d\xec\x63\xa4\xfc\xac\x06\xf0\x78\x24\xaf\x66\xfe\x03\xe0\x26\xc8\x57\x1a\x0d\x4c\xaa\x5f\x3e\xb8\x30\x6f\x26\x72\xac\x99\xd2\x4f\x4c\x8c\x47\x4f\xd5\xa9\x1d\xb4\xec\xe9\x01\x73\x73\x5a\x8a\x65\x45\xcc\x27\x5d\x97\x8a\xda\x52\x8b\xbd\xcf\x87\x26\x74\x1d\x8a\xd5\x43\xd4\x83\x66\x1b\xfa\xbc\x92\x26\x72\xf4\x14\xef\x31\xe6\x3e\xd1\xf9\x2d\xd3\xa6\x81\xbb\xfd\x87\x29\x2b\xa0\x23\xc9\xb0\x7f\x7f\x77\xa6\x64\xb1\xf4\x64\xe0\x63\x55\x9e\x9b\xa4\x73\xa9\x09\x62\x39\x73\x90\xc5\x64\xba\xfe\xe2\x49\x2f\xae\x2b\xcf\xc5\x71\x98\x9b\xf3\x83\xda\xea\xfe\x8e\x54\xd1\xd5\x1d\x7b\x71\x7c\x4c\xfd\xea\x69\x31\x71\x87\x69\x34\xf0\xf0\x3c\x31\x0b\x9f\x47\xf8\x5e\x4f\xac\x2c\x4b\x19\xd9\x1b\x78\x3c\xb1\x82\x52\x1a\x28\x01\x2b\xa4\x5e\x84\xc5\x01\xce\x27\xa6\x74\xd5\x39\xa5\x81\x12\xe7\xd1\x00\x4b\x1b\x2e\xc3\x7c\x41\xaf\xaf\xa7\xf9\x16\x36\xa7\x90\x90\xab\x24\xf1\x56\x12\x4b\xc7\xde\x6d\x65\xb7\x39\x51\x7b\x8b\xdc\xa2\xd9\xc4\xed\x5f\xa8\x7d\x85\xd9\x8d\xc4\x5e\xe1\xb5\xa2\xb5\xe4\xdb\x35\x9e\xcb\x7b\xce\x58\xbd\x20\xf5\xdf\x39\xad\xdc\xde\x98\xd2\xfb\x65\x36\x57\xe8\x58\xc8\x28\x7a\x98\x92\xfd\x2f\x44\xb7\x45\x58\x03\x7a\x2b\xc6\xc4\xe7\x9f\x00\x00\x00\xff\xff\x22\x61\x43\xa7\x6b\x05\x00\x00")

func assetsConfigmanagementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigmanagementYml,
		"assets/configManagement.yml",
	)
}

func assetsConfigmanagementYml() (*asset, error) {
	bytes, err := assetsConfigmanagementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configManagement.yml", size: 1387, mode: os.FileMode(420), modTime: time.Unix(1555954586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCpucoresYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xe3\x30\x10\x85\xef\xf9\x15\x83\x2f\x39\xc5\x61\xaf\xba\x86\xdd\xcb\xc2\xb2\x94\xa6\x97\x52\x8a\x2c\x3f\x07\x51\x69\x24\x46\x96\x8b\x1b\xf2\xdf\x8b\x82\x9b\x8a\xc6\x3e\x18\xf4\x86\x37\xef\x7d\xa3\x59\xbb\xf9\x03\x6a\x43\x34\xfd\x2a\x7f\xa2\x1d\xb1\xf6\x50\x64\x62\x36\x41\x90\xda\x9c\xf4\x09\xd7\x11\x91\xd3\x1d\x5c\x52\xcb\x8b\xc8\x9a\xc0\x7f\x31\x2b\x0a\xe9\xd5\xc4\xbc\xe8\x82\x93\x4d\x23\xe4\x49\x8b\xd5\x9d\x43\x65\xf8\xda\xce\xd9\x47\x09\xe6\xa6\x53\xc9\x3b\x94\x3c\x45\xe7\xcb\x22\x47\x81\x09\xdc\xdb\xd1\x06\xfe\x5e\xc1\x61\x54\x95\x0f\x3e\x8e\x73\x65\x2a\xdf\xb4\x04\x3f\x60\xf8\x19\xb5\xb2\x10\x93\x76\x8a\x9a\x51\x32\x9a\x45\xf4\x48\x85\xba\x2a\x5e\x77\xf9\xa3\x5d\x42\xdd\x21\x8a\xf5\x5a\x66\x45\x47\x7e\xe3\xf0\xce\xd5\xa8\xc7\xa8\xad\x53\x74\x08\xd9\xf5\xa5\x7b\x51\x20\xde\x32\x4a\xb3\x0e\x42\x61\xa0\xc3\xff\x23\x5d\xe9\x5b\xfa\xcd\x29\x0b\x68\x0e\x59\x28\x45\x98\x44\x96\x8d\xcb\x3d\x48\x93\x09\xde\x6b\xee\x29\xa4\x56\xa0\xfb\xdd\x60\x1d\x9e\x9b\x7d\xc1\xdb\x9b\x98\x2d\x0f\xa1\x79\x69\xab\xf4\x84\x09\x62\xcb\x7d\x7a\x74\xf9\x74\x9b\xdc\x50\x1e\x25\xaf\x93\x6c\xcf\x67\x41\x74\xd4\x2e\xe7\xbb\x5c\xb6\x2b\x54\xff\xee\x09\xc8\x26\xba\xf3\xae\x56\x2a\x75\x37\x9f\x01\x00\x00\xff\xff\x49\xc5\xa6\x19\x82\x02\x00\x00")

func assetsCpucoresYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsCpucoresYml,
		"assets/cpuCores.yml",
	)
}

func assetsCpucoresYml() (*asset, error) {
	bytes, err := assetsCpucoresYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cpuCores.yml", size: 642, mode: os.FileMode(420), modTime: time.Unix(1555957080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\xc1\x4a\xc3\x40\x10\x86\xef\x3e\xc5\xbc\x80\x82\xd7\xbd\x49\x55\x04\x85\x42\xab\x5e\x65\xd2\x4c\xe3\xc0\x66\x36\xee\x6e\x0a\x51\x7c\x77\xa9\x94\x36\xd3\x84\x34\x81\x25\x97\x40\x96\xef\x9f\x7f\x98\x0f\x05\x6d\xf3\x4d\xe6\x0a\x60\x77\xbb\xff\x02\x5c\x83\x60\x49\x06\x5c\xb8\xa9\xb3\x5a\x62\xfd\xff\x0a\x60\x31\x23\x1b\xcc\xe1\x0f\x80\x37\x4e\x9e\xa9\xd9\x83\x1f\x0a\xf4\x54\x70\x88\xe4\xdf\xd1\x33\x66\x96\x5a\x99\xd3\xec\xe3\x13\x80\x0b\x06\x7e\x7e\x0f\x0f\x1b\x27\x39\x47\x76\x72\x0a\x85\xe8\x59\x8a\x85\x2b\x2b\xf4\x64\x5a\x41\xfa\x32\xa0\x9a\x01\x76\x87\xce\x15\x6d\x5b\x2d\x25\x85\x80\x45\x7b\x91\x63\xcd\xab\xaf\xd5\xcc\xca\x73\x89\xbe\x31\xb0\x5c\x03\x07\x78\xd3\xe3\x01\x72\x8a\xc8\xd6\xc0\xb2\x22\x8f\x91\xa5\x80\x75\x13\x22\x95\xbd\x70\xa0\x1d\x79\x8e\x8d\x01\x96\xad\xeb\x96\x3f\xa2\x0d\x43\xed\xe2\xe2\xb4\x0d\x7a\x03\xa7\x2d\x72\xca\xea\xe2\x5c\x32\xda\x8a\x85\x46\x48\x56\xe0\xac\x92\x55\x73\x7a\xc9\x77\x7a\xfc\xf0\x89\x3b\x70\x0a\xc9\x93\x36\xe8\x0d\x5c\x90\xbc\x21\x89\xc7\x4b\x0d\x49\x56\xe0\xac\x92\x55\x73\x7a\xc9\x0b\x92\xb8\x5c\x8f\x3c\x71\x07\x4e\x21\x79\xd2\x06\xbd\x81\x0b\x92\xfd\x27\xd9\x11\x8a\x5b\xd8\xac\x82\x5b\xbd\xe9\xf5\xae\x9e\x1e\x5e\x46\x9e\xf6\x0c\x4d\xa1\x76\x42\x7b\x0f\x7e\x41\x6b\x4e\x19\xa3\x8c\x10\xab\xc0\x59\xd5\xaa\xe6\xf4\x72\xef\xf5\xf8\xe1\x03\x77\xe0\x14\x82\x27\x6d\xd0\x1b\x38\x97\xfc\x17\x00\x00\xff\xff\x63\xdc\x7e\x31\x7a\x09\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2426, mode: os.FileMode(420), modTime: time.Unix(1555703226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configManagement.yml": assetsConfigmanagementYml,
	"assets/cpuCores.yml":         assetsCpucoresYml,
	"assets/os.yml":               assetsOsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configManagement.yml": &bintree{assetsConfigmanagementYml, map[string]*bintree{}},
		"cpuCores.yml":         &bintree{assetsCpucoresYml, map[string]*bintree{}},
		"os.yml":               &bintree{assetsOsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
