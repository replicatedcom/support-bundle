// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/configManagement.yml
// pkg/analyze/api/v1/defaultspec/assets/cpuCores.yml
// pkg/analyze/api/v1/defaultspec/assets/datacenter.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerContainers.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerDevicemapperLoopback.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerIccFalse.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerLoggingDriver.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerVersion.yml
// pkg/analyze/api/v1/defaultspec/assets/loadavg.yml
// pkg/analyze/api/v1/defaultspec/assets/memoryUsage.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// pkg/analyze/api/v1/defaultspec/assets/osUptime.yml
// pkg/analyze/api/v1/defaultspec/assets/replicatedConfFormat.yml
// pkg/analyze/api/v1/defaultspec/assets/replicatedDiskPressure.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigmanagementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x53\xc1\x8a\xdb\x30\x10\xbd\xf7\x2b\x86\xbd\x2c\xb4\x6c\xb2\x7b\xd5\xb1\x81\x5e\xca\xb6\xcb\x52\x7a\x5d\x26\xd2\x58\x1e\x56\x1e\x09\x8d\x6c\xe2\x7e\x7d\x71\xe2\x24\xb6\x49\x69\x0e\x81\x42\x2f\x06\xcf\x3c\x8d\xde\x9b\xa7\x87\x82\xa1\xff\x45\xe6\x03\x40\xf7\x34\x7c\x01\x1e\x40\xb0\x21\x03\x29\x47\x4b\xaa\xa4\x2b\x1b\xa5\x62\xdf\xa0\xa0\xa7\x86\xa4\xac\x52\x9b\x12\x95\x3d\x1a\x20\xe0\x96\x82\x9a\xf1\x0f\x80\x6d\x94\xaf\xd4\x1b\x38\xa0\xde\x42\xf4\xf1\xd4\x74\xa4\x9c\xc9\xbd\x44\xe5\xc2\x51\x0c\xdc\x3d\x3d\xde\x8d\x5d\x16\x65\x5f\x97\xf3\xa4\x94\xb9\xc1\xdc\x1b\x78\xde\x5f\xed\xe0\x73\x0f\x2f\xd3\xab\x87\x79\x05\x39\x18\xf8\x51\xb3\x82\x52\xee\x28\x03\x2b\xe4\x56\x84\xc5\x03\x8e\x78\x40\x4f\x72\x3e\xa5\xd4\x51\xe6\xd2\x1b\x60\xa9\x8e\xe4\x32\x79\xd6\x42\xf9\x27\x66\xc6\x6d\xa0\x89\xa4\xd3\x4a\xf4\x54\x02\xa8\x38\xd0\x33\x16\x5b\x9b\x49\x11\x20\x61\xa9\x5f\xc9\xd3\x2e\xe9\xbc\x31\x8c\x71\x54\x61\x1b\xca\xda\xc6\xa6\x41\x71\xba\x4e\xba\xd6\xe2\x62\x5b\x66\xd0\xbc\x3f\xbf\xc1\x54\xda\x4c\xcb\x29\x87\xa6\x81\xfb\xd5\xa7\x34\x11\x07\xab\x8f\xf7\x0b\x24\x8b\xa3\x9d\x81\xc7\xb1\x4c\x1d\x86\x16\x0b\x6d\xa2\xb8\xfd\xf6\x67\x0a\xed\xb1\x6a\x2e\x50\xb9\xa0\x73\x42\x64\x46\x63\x4e\xa2\x1b\x97\xf9\x4a\xd5\x62\x7d\xa3\xdb\xdf\xe5\x0b\x06\x5d\x88\x3c\x19\xff\x2d\x2e\x0d\x87\x3f\x9b\x2e\xb1\x4c\x8c\x4f\x97\x8c\x87\x99\xf9\x8e\xb6\xad\x9f\xf5\x96\x6f\x79\xa4\x7a\x7c\xd1\x3e\x63\xff\x66\x6b\xb2\xef\x0d\xe6\xf7\x6b\xd3\x62\x6b\xaa\xfe\x96\x95\x01\x73\xe3\xa4\x6c\xce\xd7\x5e\x91\x93\x01\x0d\x36\xf0\xff\x18\x93\x61\xb9\x0f\x07\x6d\xff\x2e\x24\x13\x12\xb7\x8e\xc8\xcc\x69\xb8\x36\x20\x97\x1c\x87\x9b\xe6\xe3\x77\x00\x00\x00\xff\xff\xe3\x6b\x36\x63\x5d\x06\x00\x00")

func assetsConfigmanagementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigmanagementYml,
		"assets/configManagement.yml",
	)
}

func assetsConfigmanagementYml() (*asset, error) {
	bytes, err := assetsConfigmanagementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configManagement.yml", size: 1629, mode: os.FileMode(420), modTime: time.Unix(1557163477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCpucoresYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\xdd\x30\x10\x84\xef\xf9\x15\x83\x2f\x39\xc5\x21\x57\x5d\x4d\x7b\x29\xb4\xa1\x90\x5e\x4a\x29\xb2\xb4\x76\x97\x4a\x2b\x21\x59\x2e\xae\x79\xff\xbd\xe8\x61\x3b\xcf\x69\x2e\x06\xcf\xb2\xdf\xce\x8c\xb4\x68\xb7\xfc\x25\x75\x07\xcc\x4f\xf5\x0b\x3c\x40\xb4\x27\x05\x13\x8b\x09\x89\x72\x5b\xb2\x1e\xe9\x3a\x02\x9c\xee\xc9\x65\xb5\xfd\x01\x6c\x82\x7c\xa2\x45\x21\xe4\x9f\x26\x96\x43\xb7\x94\x39\x91\x7d\x0e\x99\x27\x0e\xa2\xd0\x3c\x35\xdb\x90\x25\xf3\xf8\x6b\x7a\x65\xc4\xc4\x5e\xa7\x45\xe1\x7e\x5d\x13\x45\x87\x56\x8a\x8f\x29\x98\xcb\xe5\xfe\x06\x38\x69\x76\x0a\x9f\x8b\xef\x29\x21\x0c\xe8\x9e\x5f\xd0\x55\x83\xe0\x8c\xff\x36\x8f\xc5\x4c\x33\x25\x9e\x16\x05\x96\x21\x6c\x72\xa2\x91\xf3\x44\xe9\x9b\x4e\xac\x7b\x47\x37\x89\xf6\xf8\x1b\xe9\xd0\x51\x0b\xb9\xde\x53\x58\x77\x3c\xcd\xda\x15\x3d\x51\x17\xc4\x5e\x83\x9e\x40\x66\x57\xd5\x0d\x05\x90\x30\x9d\x05\x80\x7c\xac\x0e\xd7\xcb\x1b\x7d\xde\xfc\x7d\xa5\xe1\x3d\x47\x5b\x95\x5f\xe4\xa3\x76\x99\xce\xd0\xa3\xd5\x17\xf9\x2d\xe1\x8f\x9c\x86\x7b\x9b\x5d\x28\xce\x56\x43\x55\xa1\xe4\x59\xa8\x9e\x79\xdb\x70\x8b\x0f\x92\x4b\x22\x2c\xa1\x24\xe4\x48\x26\x83\xc5\xb8\x62\x09\x1a\x26\x78\xaf\xc5\x22\xe4\x36\x91\xb6\x0f\x03\x3b\xfa\xde\x3c\x56\xaf\x8f\x26\x96\x5a\x7b\xf3\xa3\x3d\xdd\x7f\x7d\x14\x4b\x7d\x19\xef\xfe\x05\x00\x00\xff\xff\x22\xeb\x1e\x88\x87\x02\x00\x00")

func assetsCpucoresYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsCpucoresYml,
		"assets/cpuCores.yml",
	)
}

func assetsCpucoresYml() (*asset, error) {
	bytes, err := assetsCpucoresYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cpuCores.yml", size: 647, mode: os.FileMode(420), modTime: time.Unix(1557163486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDatacenterYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x4f\x1b\x3d\x10\xc7\xef\xcf\xa7\x18\xe5\xc2\x53\x15\x82\x38\x55\xb2\xd4\x03\x5d\x68\x85\xda\xaa\x08\x4a\x7b\xa0\x14\x4d\xec\xc9\x66\x5a\xc7\xde\xda\xde\x84\x80\xf8\xee\x95\xf3\x02\xde\x17\x48\x93\x13\x87\xbd\x44\xca\xbc\x7b\xfc\xff\x79\xd1\xa0\x9e\xdd\x92\xf8\x0f\x60\x72\x10\x7f\x01\xf6\xc0\xe0\x98\x04\x28\x0c\x28\xc9\x04\x72\x7d\x9c\xfa\xb9\x0b\x40\xe3\x80\xb4\x17\xcb\x7f\x00\x2c\xad\xf9\x48\xb3\x34\xfa\xfa\x31\x1a\x40\x91\x67\x47\xea\xd4\x7a\x0e\x6c\x8d\x80\xde\x9b\xde\xd2\xc9\xc6\x73\x3e\x0a\x8f\xb5\x0a\xc7\x63\x74\x33\x01\x87\xdf\xcf\x93\x02\x01\x59\x0b\xf8\x3a\x62\x0f\xec\x01\x4d\x74\xc7\xe4\x80\x46\xd2\x43\x9c\xa7\x09\x39\x0e\x33\x01\x6c\x86\x76\x69\x76\x94\xb3\x0f\xe4\xbe\xa1\x63\x1c\x68\x4a\x06\x5f\x9d\xb2\x28\x07\x9a\xe5\xa1\x52\x8e\xfc\xe3\xd8\x00\x43\xd6\xf4\x19\x83\x1c\x89\xc4\x08\x50\x60\x18\x9d\x51\x4e\x37\x85\xaf\x3a\x62\xc5\x7d\x69\x4d\x40\x36\xe4\xfc\xbe\xa3\x42\xb3\xc4\x40\x6a\xcf\x16\xe4\x30\x58\xf7\xa3\xff\xcb\x5b\xd3\xcc\x62\xe3\x0b\x92\x61\x93\x94\x96\xd0\xbd\x65\x99\x96\x14\x37\x1f\x38\xc3\x22\x94\x8e\xea\x63\x2f\x9c\x02\x76\x7a\xa7\x17\xef\x3e\x9d\x64\xd7\x87\x47\x47\x67\xc7\xe7\xe7\x6f\xff\xbf\xfc\xd9\xbb\x7a\xfd\xaa\xb7\x53\x4b\x60\xa3\xe8\x46\xc0\x41\x73\x95\xce\x4e\x58\x91\x4b\xe2\xa7\x23\x96\xa3\x4c\xdb\x52\x55\xdb\x4e\x96\x17\x72\x46\xc3\xf6\x2b\xa0\x09\xea\x12\x03\x65\xd6\xa8\xb9\x72\x2a\x57\x27\x57\xd6\x6a\x55\x63\x43\xfd\x74\x34\x2e\xa2\x26\xee\xee\x6b\xf6\xb5\x03\x3c\xd3\xc6\x07\xc7\x26\xcf\xec\xb8\xc0\xe6\x3a\xe9\x8f\x80\x14\x80\x66\xb3\x74\x4b\x2d\xac\xe5\x0f\xa2\xfe\x17\xd6\xf2\x04\x81\xad\x58\xfb\x90\x1d\x3f\xcd\x5a\xf4\x76\xa8\x75\xa8\xbd\x5c\xd4\x52\xfd\x37\x9b\xad\x41\x0d\x6f\x4b\xb7\x09\x6c\x69\xfc\xb6\x9f\xb6\x5a\x89\xe6\xc7\x2d\x06\x74\xcc\x75\xcc\xbd\x5c\xe6\xaa\x18\x34\xdb\xad\xa1\xae\x34\xbf\x8d\x9d\x9a\x0d\xb8\xab\x66\x6c\x49\xde\x45\xa3\xc8\x82\xbd\xcc\x96\x5a\xc5\xdd\x46\x0b\xb9\x31\x1b\x4a\x7a\x83\xb6\x12\x63\x13\xb0\x43\xc0\xc5\x0a\xe1\xee\x2e\x0a\x14\xfa\x95\xc5\xde\xdf\xf7\x5b\x68\x55\x34\x28\xf3\x0e\xd7\x34\xa1\xc3\x75\x1b\x5c\x1f\xa4\xfd\xc5\xbc\x47\xed\x6b\x8b\x7b\x52\xe5\xb0\x46\xe9\x8b\x66\x70\x72\xba\x12\x77\xbf\xfa\x16\xb4\x0a\x79\xb3\x43\x3f\xfb\x9e\xc4\x63\x09\xb8\xc4\xa9\xdf\xcd\x25\xed\xce\x9f\x96\xab\x67\xb7\xb3\xba\xd6\xbf\x01\x00\x00\xff\xff\x3d\xe2\x23\xe2\xba\x0e\x00\x00")

func assetsDatacenterYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDatacenterYml,
		"assets/datacenter.yml",
	)
}

func assetsDatacenterYml() (*asset, error) {
	bytes, err := assetsDatacenterYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/datacenter.yml", size: 3770, mode: os.FileMode(420), modTime: time.Unix(1557163459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockercontainersYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x3d\x8f\xd4\x40\x0c\xed\xef\x57\x58\x69\xc2\x67\xd0\x89\x6e\x1a\x8a\x48\x34\x08\x81\xb6\xa0\xe1\xe0\xe4\x4d\x9c\xac\x61\xe2\x89\x3c\x93\x70\x61\xb5\xff\x1d\x65\x77\xf2\x89\x74\xcd\x4a\xfb\x6c\x3f\x3f\xbf\x79\x41\x41\x3b\xfc\x25\x73\x07\xd0\xdf\x8f\xbf\x00\x6f\x41\xb0\x21\x03\xa5\x2b\x7e\x93\x66\x85\x93\x80\x2c\xa4\x3e\x2b\x5c\x27\xe1\xda\x03\x60\xf1\x48\xd6\x9b\xf8\x0f\x80\x0b\x27\x9f\x68\x98\xc6\x1e\xe7\xb1\xb9\xa3\x24\xcf\x4a\xe5\x57\xe7\x39\xb0\x13\x03\xc9\xfb\x24\x16\x59\x3c\xd7\xa7\xb0\xb0\xb5\xca\x0d\xea\x60\x20\x3d\x9f\x95\x5a\x0b\x99\x76\x22\x2c\x75\x3e\xab\xb9\x5c\xd2\x15\x75\x40\xb6\xcf\x77\xc3\x72\x08\xc4\xf2\x42\xe0\xa9\x27\xe5\x30\x18\x60\xa9\x5c\x84\x95\x6a\xf6\x81\xf4\x1b\x2a\xe3\xd1\xd2\xea\xda\xc9\xa3\xff\xf6\xcc\x1d\x00\x15\x5b\xfa\x8c\xa1\x38\x99\x15\x08\xd0\x62\x38\x1d\xa8\xa6\xa7\xd6\x6f\x0b\x23\xeb\xbb\xe8\xde\xa8\xe2\x21\xfb\xe5\x9d\x6c\x5a\xf4\x3a\x97\x63\x1b\x3a\xa5\xfd\xf4\xad\x68\x20\x4d\x16\x39\x87\x9b\xbe\xc4\xc0\xab\x17\xdf\x7f\x26\x6f\x1e\xe4\xc7\xeb\x97\xe9\x6e\x90\xa5\xa4\x27\x03\xf7\x11\xa6\x1e\x6d\x87\x81\x72\x27\xe5\xf5\xa5\x36\x77\x17\x13\xba\x5d\x2f\x2e\xec\xf5\x50\xd3\x8e\x86\x9e\x2f\x3b\xbc\x8f\x76\x1e\xa8\x7a\xde\xc0\x98\x8a\x2f\xf2\x11\xad\xdf\x9d\x3b\x07\x24\xf9\x90\x6c\x0a\x53\x14\x72\xd7\xd9\x72\x94\x35\x22\xa4\x0d\x0b\x81\x74\xcd\x91\x14\x5c\x35\xad\x8d\x61\x5d\x45\x63\xc3\xb5\xa4\xe2\x0f\xea\xf6\x25\xf6\xf1\x8f\x8a\xa7\x8f\x40\xdc\xe3\x8d\xfa\xee\x5f\x00\x00\x00\xff\xff\x39\x8a\x0c\x94\x61\x03\x00\x00")

func assetsDockercontainersYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockercontainersYml,
		"assets/dockerContainers.yml",
	)
}

func assetsDockercontainersYml() (*asset, error) {
	bytes, err := assetsDockercontainersYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerContainers.yml", size: 865, mode: os.FileMode(420), modTime: time.Unix(1557163493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerdevicemapperloopbackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xcb\x6e\xd5\x30\x10\xdd\xf7\x2b\x46\xd9\x94\x87\xb8\x50\xb1\xf3\xf6\x5e\xb1\xe1\x51\x54\x21\x36\xbc\x34\x89\x27\xc9\x50\x67\x6c\x6c\xdf\xdc\x06\xc4\xbf\xa3\x98\x34\xc4\x49\x8b\xd8\xb1\x89\x94\x33\x3e\x33\x67\x1e\x07\x05\xcd\xf0\x9d\xd4\x19\x40\x7f\x31\x7e\x01\x9e\x80\x60\x47\x0a\xb4\xad\xae\xc9\xef\x34\xf5\x5c\x51\x87\xce\x91\xdf\x71\x78\x65\xad\x2b\xb1\xba\x4e\x4f\x01\x0c\x96\x64\x82\x9a\xfe\x00\xb8\xb2\xf2\x92\x86\x5b\xf6\x97\x53\x8b\x86\xe6\xa8\xa6\xc0\x9e\xf4\x5b\x1b\x38\xb2\x15\x05\xc5\xf3\x62\x0a\xb2\x04\x6e\xda\xf8\x27\x93\xf3\xdc\xa1\x1f\x14\x1c\x16\x02\xe0\xc4\xb1\x05\x93\x6b\x18\xf3\x46\x64\xa3\xe0\x90\x8a\xc2\x52\x32\x68\xcf\x3d\x79\x60\x99\x69\x50\x59\xa9\xb9\x99\xd9\x81\x7a\xf2\x1c\x07\x05\x27\xf4\x32\xc1\x9e\x1a\x0e\x91\xfc\x7b\xf4\x8c\xa5\xa1\x45\x8f\xf3\x80\x52\xe6\x19\x06\xa8\xd9\xd0\x6b\x8c\x55\xab\x16\x20\x80\xc3\xd8\x5e\x51\x43\x37\x2e\xe4\x81\x31\xd5\xd3\x69\x50\x2c\xb5\xfd\xb8\xfb\x1a\xac\x64\x4f\x7c\xe2\xed\xd1\xc5\xa3\xa7\x35\xfb\x77\x50\xc1\x79\x71\x48\x52\x0a\x05\x8f\x8a\x07\x1f\x3e\x17\x9f\x1e\x3f\x2c\xce\x57\x8f\x59\x34\xdd\x28\xb8\xd8\xb4\xb1\x99\xe6\x7f\x6c\xe4\x80\x11\x93\xa0\x24\xe1\x9e\x16\x9e\x4d\x30\xf5\x68\x8e\x18\x69\x6f\x45\xa7\x7b\xca\x76\x54\xdd\xa2\x79\xb1\x10\x3d\x4b\xb3\xb7\x9d\xc3\xad\x0e\xfa\xa6\xb2\xe3\xc9\xc2\xfd\x74\x09\x57\x54\x6f\x76\x7f\x6f\x39\xb1\x71\x53\xa4\x73\xe3\xad\xfd\xf8\xb9\xc2\xb3\xfc\x77\x2c\x65\x72\xc8\xa5\xbc\x40\x13\x56\xd2\xef\x36\x8b\xd8\xb8\xbc\xfb\x8c\xf1\x0f\x96\x79\x73\xf9\xee\x6f\xb6\x81\xcc\x3a\x9a\xca\x63\x73\xf6\x2b\x00\x00\xff\xff\xe9\xc2\x4f\xab\x4f\x04\x00\x00")

func assetsDockerdevicemapperloopbackYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerdevicemapperloopbackYml,
		"assets/dockerDevicemapperLoopback.yml",
	)
}

func assetsDockerdevicemapperloopbackYml() (*asset, error) {
	bytes, err := assetsDockerdevicemapperloopbackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerDevicemapperLoopback.yml", size: 1103, mode: os.FileMode(420), modTime: time.Unix(1557163435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockericcfalseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x16\xba\x24\xf9\xbe\xc6\x45\xd0\x1b\xaf\x2a\x0a\x04\x45\x7f\x90\x02\xb9\xf4\x27\x58\x93\x6b\x79\x5b\x6a\xa9\x2e\x29\x25\x6e\xd1\x77\x2f\x28\x4b\xb6\x25\x37\x08\x90\x8b\x01\xef\x70\x76\x39\x9a\x1d\xa2\xa0\xdf\xfe\x22\xb3\x00\xe8\xae\xf2\x2f\xc0\x25\x08\xd6\x64\xc0\x05\xfb\x83\x74\xe9\x90\xea\x20\x4b\xb6\xb6\x47\x01\x3c\xae\xc8\x47\x33\xfc\x03\x60\x1b\xe4\x2d\x6d\x0d\x48\xb8\xdb\x71\xf6\x90\xa3\xc8\x4a\xee\x63\x88\x9c\x38\x88\x81\xe2\x55\x31\x80\x2c\x91\xab\x4d\x3a\xb4\x69\x94\x6b\xd4\xad\x81\xf7\x01\xae\xcb\xf2\xa8\x47\x42\xf6\x06\x5e\xf7\xad\xe1\x5a\x12\xe9\xa5\x0d\x92\x90\x85\x14\x6c\xa8\xeb\x56\xd8\x62\x1e\x00\x1c\xc1\x71\xc4\x95\x27\xf7\x02\xb0\x69\x32\xdc\x04\x21\x49\x11\xee\xd9\x7b\x58\x11\xb4\x92\x71\x48\xe1\x88\x4b\xfb\x71\x91\x3a\x52\x4e\x5b\x03\xa4\x1a\x46\x29\x4a\x15\xc7\x44\x7a\x8b\xca\x99\x7d\x24\x7f\xfa\xb9\xf6\x65\x80\x35\x7b\x7a\x87\xc9\x6e\xcc\x51\x11\xa0\xc1\xb4\xb9\xa1\x8a\x1e\x9a\x38\x05\x72\xab\x97\xbb\x2e\x77\x2c\xeb\xf0\x65\xf9\x3d\x06\x99\x1c\xd1\x9e\x57\x62\x93\x5a\xa5\x39\x7b\x07\x1a\x38\x2b\x3e\x91\x76\xa4\xb7\xa4\x91\x83\x14\x06\xfe\x2b\xce\x3f\x7f\x2b\xbe\xfe\x7f\x51\x9c\xcd\x38\x2c\x8e\x1e\x0c\x5c\x9d\xa8\x39\xd8\xfd\x7c\x29\xfd\xe2\x3c\x5f\x05\x5b\x9b\xef\x7e\xbe\x46\x1f\xe9\xe2\x89\x9b\x53\x87\xbe\xc5\x44\x65\x10\xd7\xef\xda\xc4\x21\x3b\x56\xa7\xd3\x24\xa4\xf9\x78\xaa\x9b\xec\xfd\xef\x3f\xb3\x7a\x37\x18\x7f\x43\xeb\x13\xab\x1f\xed\x1f\x93\xb2\x54\x65\xa8\x1b\x3c\x15\x4a\x3f\x0d\x14\xbd\xb6\x62\xf1\xe8\xa4\xa9\x0d\x43\x66\x3e\xc8\x9b\x4c\x9b\x79\x31\xc6\x67\xcc\x49\x59\x02\xf5\x9b\xee\x26\xe7\xc6\x38\x3d\x99\xa3\x7f\x91\x0f\xe1\x70\xb4\x6a\xab\x09\x36\x7f\x16\x86\x2b\x8f\x8f\xc3\xb0\xd8\xf7\x1b\xf4\xb4\xf8\x1b\x00\x00\xff\xff\xbc\xa3\x32\x9e\x76\x04\x00\x00")

func assetsDockericcfalseYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockericcfalseYml,
		"assets/dockerIccFalse.yml",
	)
}

func assetsDockericcfalseYml() (*asset, error) {
	bytes, err := assetsDockericcfalseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerIccFalse.yml", size: 1142, mode: os.FileMode(420), modTime: time.Unix(1557163505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerloggingdriverYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x3d\x6f\xdb\x40\x0c\xdd\xfb\x2b\x08\x2d\xe9\x47\xe2\x20\xe8\x76\xab\x8b\x0c\x6d\xfa\x81\x0c\x5d\xd2\x34\xa0\x25\xfa\xcc\xf4\x4c\x0a\xbc\xb3\x1a\xb7\xe8\x7f\x2f\x24\x4b\xaa\x74\x6e\x06\x2f\x12\x8e\x8f\x1f\x8f\xef\xde\xa1\x60\xd8\xff\x22\xf7\x02\xa0\xb9\x6a\xbf\x00\x17\x20\xb8\x25\x07\x95\x96\x3f\xc8\x16\x41\xbd\x67\xf1\xef\x8c\x1b\xb2\x05\xc7\xf7\x51\xe5\x9a\x03\x75\xb9\x00\x01\x57\x14\xa2\xeb\x4f\x00\x5c\xaa\x7c\xa0\xbd\x03\xd1\x87\xa0\x3e\x8e\x40\x45\x91\x8d\xaa\x2f\x1a\x39\xb1\x8a\x83\xe2\x6d\xd1\x83\x2c\x91\xfd\x26\xfd\x6b\x52\x1b\x6f\xd1\xf6\x0e\x3e\xa9\xc0\x63\x54\xb9\x58\x73\x20\x08\xea\xa1\xea\x78\x4c\xba\x26\xe4\xe0\xe0\xe6\xc0\xb2\x87\x81\x23\x88\xa6\x49\xa9\x1a\x3c\xea\xce\x04\x43\x75\x0e\x25\x4a\x8b\x96\x1a\x02\x95\xed\x5f\x12\xb2\x90\xc1\x8c\x70\xa4\x86\x8c\xd3\xde\xc1\x4f\x34\xe9\xc3\x46\x9e\x63\x22\xfb\x8a\xc6\xb8\x0a\x34\xd9\x7c\xd4\x6d\xce\x10\xa0\x25\xf0\x11\x53\xb9\x71\x93\x20\x40\x8d\x69\x73\x4b\x9e\x9e\xea\x38\x07\xda\x56\x97\x07\xf5\x1f\x58\xd6\xfa\x6d\xd1\xee\x31\x4b\xb1\xae\x6e\x89\x75\xda\x19\xe5\xd5\x07\xd0\xc1\x59\x71\x33\xbd\xbb\xc2\xc1\xeb\xe2\xe5\xdd\xf7\xe2\xfe\xcd\xab\xe2\x2c\xab\x61\xa9\xe8\xc9\xc1\x55\x1f\xa6\x06\xc3\x0e\x13\x2d\x55\xaa\xee\xba\x66\x7b\x96\x43\x74\x3e\x59\x34\xe5\x54\x68\x5b\xb7\x02\xfe\xfe\x93\xc5\x9b\x5e\xbe\x5b\x5a\x1f\x09\x76\x4a\xff\x98\x8c\xc5\x2f\x75\x5b\xe3\xb1\x0e\xed\x56\x0e\xee\x46\x13\x9c\x0f\x0e\xb8\x3f\x81\xcd\xe8\xce\xcf\x72\x8d\x21\x1e\x0d\x19\xad\x3a\x8e\xb9\x1c\xc6\x64\x99\xcf\x5b\xf5\xbf\x36\xcd\x37\x1d\xdd\x58\xd1\x6a\xe7\x33\x34\x7f\x85\x23\xf7\xe1\x35\x76\xce\xfe\x1b\x00\x00\xff\xff\x76\x55\xc7\xc6\xed\x03\x00\x00")

func assetsDockerloggingdriverYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerloggingdriverYml,
		"assets/dockerLoggingDriver.yml",
	)
}

func assetsDockerloggingdriverYml() (*asset, error) {
	bytes, err := assetsDockerloggingdriverYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerLoggingDriver.yml", size: 1005, mode: os.FileMode(420), modTime: time.Unix(1557163554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerversionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\xea\x40\x0c\xbc\xf3\x2b\xac\xbd\xf0\x3e\xf4\x78\xa2\xc7\xbd\xf4\x40\xd5\x4b\x55\xb5\xa2\x12\x97\x7e\x20\x93\x18\xe2\x76\xb3\x1b\x79\x97\x40\x8a\xf8\xef\x55\xc2\x86\x26\x11\x6a\x0e\x91\x76\xc6\x1e\xdb\x63\xa3\x45\x53\x7d\x92\x1e\x01\x94\xd3\xfa\x0f\xf0\x0f\x2c\xe6\xa4\x21\x75\xc9\x07\xc9\xa4\x24\xf1\xec\x6c\x43\x01\x18\x5c\x91\xf1\x3a\xbe\x00\x38\x71\xf6\x8e\xaa\x36\x7a\xb9\xcb\xd0\xd0\x99\x4d\xc9\xb3\x50\xfa\xe8\x3c\x07\x76\x56\x83\xba\x52\x91\x64\xeb\x79\x93\x85\x6f\xa5\x42\x38\x47\xa9\x34\xdc\x34\x4a\x70\x38\x08\x15\x06\xda\xfa\xc7\x63\x47\x35\x20\x9b\x73\xa0\x27\x29\x49\x20\xc6\x01\xfb\x1f\x52\x3d\x95\x24\x1c\x2a\x0d\x6c\xd7\x2e\xc2\x42\x1b\xf6\x81\x64\x81\xc2\xb8\x32\xd4\x19\xaf\xf5\xa2\x6f\x42\xfd\xad\xd9\xd0\x3d\x86\x24\xd3\x1d\x10\xa0\xc0\x90\xcd\x69\x43\xfb\xc2\xf7\x89\x5a\xeb\x7f\x34\xa9\xae\xfd\x32\x79\xf7\x3d\xc1\xa6\x0f\xda\x17\x33\x2c\xc2\x56\x68\x98\x7d\x22\x35\x8c\xd5\x53\x33\xef\xe2\xd4\x91\xd2\xf0\x47\xfd\x7a\x7e\x53\xaf\x7f\x7f\xab\xf1\x20\x87\x6d\x4a\x7b\x0d\xd3\x08\x53\x89\x66\x8b\x81\x66\xce\xa6\xcd\x3e\x7a\x83\x26\x2d\xda\xaf\x6c\x5d\x18\xb6\x42\x79\x51\x3b\x78\x38\x0e\xf0\x32\xfa\x37\xa7\xf5\x25\xc7\xe2\xc6\x1f\xec\x2d\x1a\x3f\x98\xef\xbc\x7c\x75\xad\x7a\x44\xbb\xeb\x99\xdb\x9a\xb4\x6e\xa6\x46\x48\x72\xb6\x14\x4f\xee\x42\xa5\xee\x9e\x77\x28\x7d\x6a\x78\xc1\xb1\xb9\xf6\x8e\xad\x5b\x9e\x74\x47\x5f\x01\x00\x00\xff\xff\x6e\x31\x1a\xa8\x1b\x03\x00\x00")

func assetsDockerversionYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerversionYml,
		"assets/dockerVersion.yml",
	)
}

func assetsDockerversionYml() (*asset, error) {
	bytes, err := assetsDockerversionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerVersion.yml", size: 795, mode: os.FileMode(420), modTime: time.Unix(1557164646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLoadavgYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xc1\x8a\xd4\x40\x10\xbd\xef\x57\x3c\x06\x64\x2f\xeb\x40\x0b\x01\xe9\xeb\xa2\x17\x0f\x2e\xc2\x7a\x75\x6b\xd2\x95\x6c\x63\xa7\x3a\x74\x77\x22\x71\x9c\x7f\x97\x0e\xc9\x24\x99\x1d\xd7\x8b\xce\x61\x20\xaf\x5e\xbd\x57\x79\xa9\x22\x21\x37\xfc\x64\x7d\x03\xf4\x2a\xff\x03\x6f\x21\xd4\xb0\x86\x8f\x7b\xe7\xc9\x50\x5f\x8f\x30\xe0\xe8\xc0\x2e\xea\xe9\x09\xb0\xa5\x97\x4f\x3c\x64\xe6\xb7\x2d\x13\x30\x1c\x6d\x60\xf3\xe0\xa3\x4d\xd6\x8b\xc6\xee\xfd\x6e\x2a\x5a\x89\xb6\x7e\x4e\x8b\x4e\x1b\x6c\x43\x61\xd0\xb8\x3d\x1e\x03\xb7\x0e\xb3\xaf\xc2\xaf\x5c\x94\x54\x61\xf7\x66\xff\xae\xda\x9d\x4e\xb8\xa0\x14\x7f\xa7\xa8\x2b\x9c\xdb\xd5\xa0\x89\xac\xd3\xb8\x7f\x78\x44\x6e\x00\xf5\x1c\xa8\xe6\x08\xdf\x73\x80\xba\x43\x71\x07\x12\x03\x55\xa0\xb1\xd2\x25\x8e\xe7\xde\xc8\x3d\x07\x9b\x06\x0d\x2b\x95\x9f\xe0\xc0\xb5\x8d\x89\xc3\x57\x0a\x96\x0e\x8e\x57\x81\xcd\xc9\x5e\x86\x85\x19\xd1\x38\x9e\xfe\xc4\x56\x2f\xe9\xea\x35\x7e\xf1\x92\x5f\xbc\xaa\x7f\xa5\x41\xad\x3b\xb8\x27\xd7\x51\xe2\x7b\x2f\x66\xfc\xa8\x9b\x37\x2b\x67\x54\xaf\x64\x90\x93\xdb\x02\xa3\xaf\x4f\x97\xe0\x68\xd0\xb4\x39\xcb\xd5\x88\xcb\xaf\x9f\xd2\xfc\xc2\xd5\xd5\x44\xfe\xa9\x70\xf1\xdf\x26\x5e\x2b\x4f\x77\xf0\x59\x3e\x92\x8b\xbc\x95\x3f\x9f\xc4\xa3\x7c\x17\xff\x43\x36\xc5\xf3\xca\xfa\xce\x99\x3c\x5a\x46\x38\x34\x56\x78\x36\xda\xe3\x83\xc4\x2e\x30\x06\xdf\x05\xc4\x96\xcb\x08\x2b\xa5\xeb\x0c\x23\x3d\x33\x4a\xdf\x34\x79\xa9\x9f\x96\x23\x7f\xda\x6f\x4c\x96\xdd\x36\x7c\xe8\xea\x9b\xdf\x01\x00\x00\xff\xff\xc7\x40\x21\x24\x29\x04\x00\x00")

func assetsLoadavgYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLoadavgYml,
		"assets/loadavg.yml",
	)
}

func assetsLoadavgYml() (*asset, error) {
	bytes, err := assetsLoadavgYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/loadavg.yml", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1557163634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsMemoryusageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x0c\x82\x90\xf6\x10\xc5\x81\x12\xa8\x6e\xc5\x34\x97\x1e\x1a\xda\xa6\x97\x52\xca\x48\x1a\x29\x4b\x77\x67\xc5\x7e\x28\x28\xb6\xfe\x7b\x59\x59\xb1\xb4\xb6\xa9\x0d\xed\x21\x3a\x08\x69\x66\xf7\xbd\xd9\xf7\x66\x16\x19\x65\xf7\x4c\xd9\x02\xa0\xbd\x09\x6f\x80\x2b\x60\x54\x94\x81\x22\xa5\x4d\x97\x7a\x8b\x35\x0d\x09\x00\x89\x39\x49\x9b\x8d\x7f\x00\xa2\xd0\xfc\x89\xba\x0c\xb4\xfd\xb5\x5d\xbe\x4b\x95\x64\x85\xa1\xf2\x5e\x5b\xe1\x84\xe6\x0c\x92\xdb\x64\x4c\x0a\xb6\xa2\x7e\x74\x13\x4c\x63\x84\x42\xd3\x65\x70\xb9\x5e\x1b\x6a\x24\x18\xed\xb9\x84\x74\x0b\xf9\x10\x0a\xb8\x27\x53\x10\x3b\x58\xc2\x26\x2c\x67\x57\x41\x72\x91\x2e\xab\xa4\xef\x2f\x2e\x67\xa4\x0e\x85\x9c\x70\xac\xcf\x23\x94\x6f\xda\xa1\x8c\x22\x1f\x5a\x14\x12\x73\x49\xb0\x81\x4a\x6a\x74\xb7\xef\x60\x03\x8f\x5e\x21\x7f\x15\xcf\xd4\xf7\xa3\x0c\xe0\x2d\x95\xa0\x2b\x18\x91\x0f\x51\xa3\x5d\x53\x49\x96\x5a\x32\xc2\x75\x19\x3c\xa1\xe1\x31\x6c\xa8\x16\xd6\x91\xf9\x8e\x46\x04\xf2\x99\xa4\xb1\xfa\x71\x8d\xbb\x45\x70\x34\x9d\xc1\xba\xff\x1b\xce\x50\xe7\x71\x8c\x21\x75\x6a\xff\xe8\xc1\x0c\x81\x5a\x9c\xa9\x2d\x2a\xc0\x3d\xdb\x26\x79\x0f\x04\xeb\xfb\x71\x5b\x29\xda\xbb\xa0\x3c\xbc\xb1\x3e\xdf\x7e\x9d\xe9\xd9\xdb\xa3\x36\x28\x2f\xb7\x28\x37\xcb\xe5\x8e\x84\xb8\x9c\x5c\x09\x65\x7b\x74\xb4\xd2\x5c\x0e\xdd\x19\xe9\x5f\xbc\x44\xb3\xd9\x49\x21\x1c\x2d\x0e\x0c\x1a\x69\xb7\x1f\x1c\x08\x54\x13\x1c\x9f\xc9\x39\x3d\xed\xe8\xf9\x17\xaa\x4e\xba\xfc\xdf\x49\xf6\x5b\x60\x1c\xc5\xcf\x7c\x87\xd2\x52\xcc\xb2\x9b\xca\x07\xfe\xcd\xfa\x89\xa3\xe4\xcb\xa4\xad\xb4\x97\x65\xa8\x30\x44\xc8\x28\xc1\x34\x4d\x0c\xd6\x94\xc2\x47\xb6\xde\x10\x74\xda\x1b\xb0\x0d\x15\x16\x04\x17\xd2\x97\x04\x08\x85\x56\x2a\xb4\x8c\xb6\xa9\x21\x2c\xaf\x2a\x21\xe9\x47\x72\xdd\x18\x5d\x5c\x2b\x52\x82\x2b\x9d\xfc\x4c\x23\xe2\x69\x9e\x4a\xca\x7d\x7d\xda\x37\xf6\x2a\x27\xb3\xd2\xaa\x41\x43\xfb\x3a\xd6\x2e\x83\xf7\xcb\xc5\x39\xd2\x1d\x76\xff\x59\xe2\xfd\xeb\x95\x06\xaf\xf3\x5a\x8b\xad\x08\x46\x2d\xfe\x04\x00\x00\xff\xff\x1f\x3e\x4a\x0c\x4b\x06\x00\x00")

func assetsMemoryusageYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMemoryusageYml,
		"assets/memoryUsage.yml",
	)
}

func assetsMemoryusageYml() (*asset, error) {
	bytes, err := assetsMemoryusageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/memoryUsage.yml", size: 1611, mode: os.FileMode(420), modTime: time.Unix(1557163687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x91\xc1\x6a\xe3\x30\x10\x86\xef\xfb\x14\xf3\x02\xbb\xb0\x57\xdd\x42\xd2\x52\x68\xc1\x90\xd0\x5e\xcb\x38\x9e\x38\x03\xf2\xc8\x95\x64\x83\x5b\xfa\xee\x25\xc5\x4d\x2c\xc5\x8d\x7c\xf0\xc5\x39\x04\x3c\xfe\x66\xf8\xfd\x7f\x28\xa8\xbb\x77\x52\x7f\x00\xda\xff\xa7\x7f\x80\xbf\x20\x58\x91\x02\xe3\xfe\x35\x79\x23\xbe\xf9\x9e\x02\x68\xcc\x49\x3b\xd5\x3f\x01\xf0\xde\xc8\x23\x75\x27\xf0\x35\x00\x59\x1c\x97\x47\x7f\x21\x6b\xcb\x15\xda\x4e\x41\xb6\x03\x76\xf0\x3c\x84\x01\x0a\xf2\xc8\x5a\x41\x56\x93\x45\xcf\x52\xc2\xae\x73\x9e\xaa\x11\xd4\x51\x4b\x96\x7d\xa7\x80\xe5\x60\xfa\xb1\xa5\x92\x9d\x27\xfb\x82\x96\x31\xd7\x34\x88\x78\xf9\x94\xf3\x08\xc0\x38\x05\x1f\x9f\xfd\x80\x5a\xd4\x0d\x7a\x5a\x1b\x29\xd8\xb3\x91\x60\x7b\xff\x33\x55\x83\x7d\x00\xe7\x2d\x4b\xb9\x36\x55\x8d\x96\xc2\x57\x00\xf4\xa6\xa0\x09\x63\x9f\x7e\x6d\x9f\x6e\x4b\x87\x28\x4f\x5f\x57\x26\xf7\xa8\x5d\x74\x2e\x6a\x4e\x8c\x8f\x2b\x49\x35\xf8\xcb\xca\xa5\xc9\x82\xf2\xa6\x8c\xc5\xa3\xae\x59\x68\x82\xf8\x00\x4c\x89\x5f\x0d\xe1\xdb\xb1\x23\x74\x29\xe2\x31\x8c\x3d\xab\xf8\xd5\xf5\xed\x94\xf8\x91\x95\x84\xf8\x3d\x89\x3f\x87\xbc\x25\x3e\x00\x53\xe2\xd7\x24\x3e\xdb\x4d\x12\x1f\xa1\x4b\x11\x1f\xd4\x31\xb3\xf8\xa8\x92\x29\xe2\x47\x56\x12\xe2\xed\x91\xf4\x04\xed\x03\x2c\x25\x7d\xfb\x70\xf7\x34\x49\x79\x00\x2e\x45\xf8\xa0\x88\x99\x75\x07\x75\x4c\x91\x7d\xb5\x90\x50\x5d\x50\xce\x28\x13\x64\x07\x60\x4a\xf7\x66\x08\xdf\x0e\x1d\xa1\x4b\x51\x5e\x84\xb1\x67\x95\xbe\xb9\xbe\x9d\xd2\x3e\xb2\x12\x8b\xff\x0a\x00\x00\xff\xff\xb7\x12\x52\x8d\xde\x09\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2526, mode: os.FileMode(420), modTime: time.Unix(1557163866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsuptimeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x31\x6f\xdc\x30\x0c\x85\xf7\xfc\x8a\x87\x2c\x99\x7a\x40\xa7\x02\x5a\xd3\x76\xe9\xd0\xa2\xc0\x75\x6d\x78\x16\x73\x21\x2a\x91\x86\x28\xb9\x70\x2f\xf7\xdf\x0b\x5f\x7d\xf6\x19\xe8\x12\x0f\x06\xf4\x48\x7d\x7c\x78\x14\x29\xa5\xf1\x0f\x87\x3b\x60\x78\x3f\xfd\x81\x77\x50\xca\x1c\x60\xbe\x6b\x7d\x95\xcc\x17\x15\x48\x74\xe0\xe4\x61\x3e\x01\xd2\x99\x7e\xe1\x71\x6a\xfc\xb9\x69\x04\x22\xbb\x14\x8e\xdf\xcc\xa5\x8a\x69\xc0\xfd\x87\xfb\xb9\x28\xea\x72\x7c\xa9\x2b\xa6\x2f\x92\xa9\x8c\x01\x0f\xa7\x53\xe1\x3e\x61\x67\xbe\xbf\xe0\xf0\x0a\xe7\xce\x34\x3a\x5e\xf1\xd2\x32\xe9\xc7\x56\x68\x02\x9e\xcf\x0f\x37\xb3\x2a\x49\x7a\xe3\x75\x54\xab\x94\xf0\xcf\x36\x5c\xb4\x63\x24\xf2\x8a\x83\x59\x5d\xd9\xce\x03\x17\xa9\x63\x80\xe8\xb3\xcd\x72\xe1\xa3\x78\xe5\xf2\x83\x8a\xd0\x21\xf1\x4d\x24\x6b\x74\xfb\x6d\x20\x58\xa4\x80\xd3\x79\x96\x79\xa0\xd4\xa8\xf2\xa3\x69\xbc\xe4\xb4\x21\x75\x57\x35\xdc\x50\x00\xb5\xba\x15\x00\xce\xfd\x64\x71\xe1\x5e\xbf\x61\x36\xf8\x9d\x9f\xff\x6b\x69\x5e\xc5\x57\xfd\x4c\xc9\x79\x4b\x5d\xb6\xb2\xd7\x5f\x6a\xbf\x75\x53\xbc\x46\xfe\x68\x2d\xc5\xc9\xd1\xa4\x70\xc9\xa2\x3c\x47\xba\xc3\x27\xf5\x56\x18\xa3\xb5\x02\xef\xb9\x73\x88\x76\xa9\x45\x06\xa1\xb3\x9c\x49\x23\x9e\x96\x27\xf6\xb4\xdb\x0c\x58\x73\x8f\x7c\x68\xc7\xbb\xbf\x01\x00\x00\xff\xff\x7a\x39\x1d\xfe\xa6\x02\x00\x00")

func assetsOsuptimeYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsuptimeYml,
		"assets/osUptime.yml",
	)
}

func assetsOsuptimeYml() (*asset, error) {
	bytes, err := assetsOsuptimeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/osUptime.yml", size: 678, mode: os.FileMode(420), modTime: time.Unix(1557163707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReplicatedconfformatYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\xc1\x8e\xd3\x30\x10\xbd\xef\x57\x8c\xf6\xb2\x27\x5a\x10\x37\x5f\xab\xad\x84\x00\x81\x56\x88\xd3\x4a\x68\x6a\x4f\x92\xa1\x8e\x1d\x8d\x27\xdd\x06\xc4\xbf\xa3\x84\x34\x4d\x0c\xe4\x82\xb8\xec\x25\x72\x66\xc6\x2f\x2f\xcf\xcf\x0f\x03\xfa\xee\x1b\x99\x1b\x80\xd3\xab\xfe\x09\xf0\x02\x02\xd6\x64\x40\xa8\xf1\x6c\x51\xc9\x6d\xae\xcb\xf9\x7a\x17\x43\xb1\x8f\x52\xa3\x0e\xfb\x00\x3c\x1e\xc8\x27\x33\xbe\x01\xb0\x8d\xe1\x2d\x75\x06\x4a\xc1\xee\x8b\xad\xc8\x1e\x6b\x94\xe3\xd4\x77\x94\x58\xc8\x7d\x8c\x89\x95\x63\x30\x70\xfb\xfa\x76\x6c\x72\x48\x5c\x56\x7a\xc5\x6a\x84\x6b\x94\xce\xc0\x9b\x60\xa3\x08\x59\x9d\x13\xb4\x31\x14\x33\x58\x45\xf6\x06\x3e\x55\x04\x05\x7b\x02\x54\xd8\x92\xda\x6d\xb6\x01\x38\x41\x31\xf0\x57\x72\xc0\x17\x5c\xdf\x4d\x48\x89\x4e\x24\xac\x9d\x81\x27\x94\x30\x96\x85\x4a\x4e\x4a\xf2\x19\x85\xf1\xe0\x69\xf6\xc3\xbf\x4b\xf7\x2e\x96\xf7\x67\x4e\x9a\xa6\x19\x18\x38\xbd\x47\xb5\x95\x99\x15\x01\x1a\xd4\xea\x81\x4a\x3a\x37\x69\xd9\xe8\x71\x67\xdc\x1f\x37\x5f\x63\x2b\x01\xbd\xdb\xfa\x58\xa6\xc7\x8d\xe0\xd3\xfa\xbc\x8f\xe5\xfa\x40\x52\x47\x22\x8b\x19\x19\x98\xec\xb0\xd1\x56\x28\xe7\xf3\xab\x69\xe0\x6e\x73\x97\x75\x38\x38\x3a\x1b\x78\xb9\x28\x27\x8b\x21\xf4\x52\x19\x50\x69\x69\x45\xae\xde\x52\xf7\x22\x51\x9e\xa7\x5c\x7b\x64\x4f\x0e\x34\x82\x10\x3a\xe8\x4d\xc8\xa5\xf9\x07\x0d\xe9\x84\xbe\x45\xa5\x5d\x0c\x6e\xb8\x43\x0b\x33\xda\x4b\x75\x49\x28\x44\xcd\x19\x52\xdd\xf4\x2e\xff\xfe\x23\xab\x9f\x46\x8f\x3f\x50\xb1\xee\xea\xff\xf8\xb1\x3f\x79\x62\x8c\x87\x0f\x61\x8f\x3e\x65\x7a\x4f\x49\x91\x5f\xf7\x78\x5c\xcc\x5d\x62\xe2\x6f\xd1\x30\xc5\xc1\x35\x24\x96\x27\x32\x85\x83\xa3\x43\xbb\xb4\x4c\x9e\x84\x23\xeb\x4b\x1e\xf6\x46\xbc\xf9\x19\x00\x00\xff\xff\xd1\x6c\x41\x71\x7b\x05\x00\x00")

func assetsReplicatedconfformatYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReplicatedconfformatYml,
		"assets/replicatedConfFormat.yml",
	)
}

func assetsReplicatedconfformatYml() (*asset, error) {
	bytes, err := assetsReplicatedconfformatYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/replicatedConfFormat.yml", size: 1403, mode: os.FileMode(420), modTime: time.Unix(1557163715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReplicateddiskpressureYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6f\xd4\x40\x0c\xbd\xe7\x57\x58\x3d\x50\x09\xa9\x5b\x10\xb7\x51\x2f\xa8\x85\x0b\x1f\xad\x8a\xc4\xa9\x12\x72\x33\x4e\x62\x3a\x3b\x8e\x3c\x4e\xd8\x05\xf1\xdf\x51\x3e\xda\x9d\x5d\xd1\x45\x54\x3d\x40\x73\xda\x7d\xb6\xdf\xbc\x3c\xbf\x8c\xa7\x0a\xbb\x60\xc9\xc1\xb3\xdb\x9f\x05\x40\xc0\x6b\x0a\xc9\x15\x00\x00\x5c\x4a\x7c\x47\x6b\x07\x9e\xd3\xcd\x97\xaa\x0b\x61\x84\x3d\x25\x56\xf2\x17\x92\xd8\x58\xa2\x83\x83\x57\x07\x05\x00\xc7\xc4\x75\x63\xd3\x68\xab\xbc\x44\x5d\x3b\xf8\x28\xf0\xa9\xc5\x92\x40\x22\x9c\x51\xcf\x25\xcd\x1c\x86\x1c\x1c\x9c\x47\x02\x51\x58\x8a\x12\x28\xb5\x81\x4b\x34\xf2\x50\x4a\x34\xe4\x48\x9a\x80\xd3\x50\x10\x35\x8e\x35\x58\x83\x06\x6c\x03\x28\x9d\x81\x54\xa3\x34\x48\xc3\x09\x23\x6f\xa2\x9e\x94\x6d\xed\x80\x54\x45\x0b\x00\xea\x31\x74\x68\x74\x2a\xd1\x8f\x7a\xe7\x97\x3b\x1a\x0e\x99\x90\x09\x18\x9e\x28\xb6\xf9\x03\x40\xcb\x76\xa0\xfa\xf1\x33\xc3\x7a\x54\xc6\xeb\x40\x97\x54\xb9\x4c\xf2\x7b\xa9\xdf\xac\x38\x8d\x1e\x3e\x3a\xf9\x19\xa7\x9b\x0b\xa5\x94\x3a\xa5\xb9\x7b\x76\xfb\x3c\xbe\xc5\x90\x68\xc3\x9b\x1b\x3f\x8c\xc1\xce\xdc\xc6\xfa\xd7\x21\xdc\x63\x79\x83\x3d\x01\x45\xe9\xea\x66\xd7\xdf\x6d\x8f\x3d\x5d\x77\xf5\x1d\x9e\x47\x67\x16\x99\x07\xa8\x28\x30\x62\x58\x7f\x1f\xc5\xf6\x2f\x6f\xb7\x70\x72\xe2\xe0\x79\x16\xc0\xd1\x29\x5c\x92\x03\x49\x0b\x9f\xbd\xf8\x62\x23\x76\x6e\x53\xaa\x39\x19\xe9\xe7\xd9\xb5\xec\xec\xa3\x99\xe3\xbe\x05\x4d\x4f\xc5\x81\x3e\xa0\x95\x4d\x2e\x1a\xa0\x45\x6b\x2e\xa9\xa6\x55\x9b\xb6\x0b\x03\xef\xf1\x86\xf2\x6a\xf1\x55\x3a\x8d\x18\xfc\x71\x90\x3a\x5d\x2d\x14\xbf\xed\xef\x4f\xe6\x49\x75\x7f\x4f\x90\x7a\xab\x41\x47\x25\xa7\xd8\x5a\xa7\xb4\xab\x67\x2a\x3a\x38\x5c\x1c\xee\x54\x38\x7a\x5a\x39\x78\xb1\x05\xa7\x12\x63\x1c\xac\x72\x60\xda\xd1\x1e\xbb\x7e\x13\xb9\x27\xe6\x58\x94\x29\xd7\x10\xa8\xb2\xe1\x7a\xf2\xe3\xf5\xf4\x60\x1f\x1f\x16\xe5\x23\x69\x49\xd1\x44\xff\x91\x4c\xdf\xe9\xf9\xdb\x55\x65\x83\x7f\xde\x59\xd6\xfc\x94\xe3\xfe\x9f\x98\xf9\x98\x5f\xc2\xaf\x00\x00\x00\xff\xff\xd6\x33\xc2\x80\x56\x08\x00\x00")

func assetsReplicateddiskpressureYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReplicateddiskpressureYml,
		"assets/replicatedDiskPressure.yml",
	)
}

func assetsReplicateddiskpressureYml() (*asset, error) {
	bytes, err := assetsReplicateddiskpressureYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/replicatedDiskPressure.yml", size: 2134, mode: os.FileMode(420), modTime: time.Unix(1557163724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configManagement.yml":           assetsConfigmanagementYml,
	"assets/cpuCores.yml":                   assetsCpucoresYml,
	"assets/datacenter.yml":                 assetsDatacenterYml,
	"assets/dockerContainers.yml":           assetsDockercontainersYml,
	"assets/dockerDevicemapperLoopback.yml": assetsDockerdevicemapperloopbackYml,
	"assets/dockerIccFalse.yml":             assetsDockericcfalseYml,
	"assets/dockerLoggingDriver.yml":        assetsDockerloggingdriverYml,
	"assets/dockerVersion.yml":              assetsDockerversionYml,
	"assets/loadavg.yml":                    assetsLoadavgYml,
	"assets/memoryUsage.yml":                assetsMemoryusageYml,
	"assets/os.yml":                         assetsOsYml,
	"assets/osUptime.yml":                   assetsOsuptimeYml,
	"assets/replicatedConfFormat.yml":       assetsReplicatedconfformatYml,
	"assets/replicatedDiskPressure.yml":     assetsReplicateddiskpressureYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configManagement.yml":           &bintree{assetsConfigmanagementYml, map[string]*bintree{}},
		"cpuCores.yml":                   &bintree{assetsCpucoresYml, map[string]*bintree{}},
		"datacenter.yml":                 &bintree{assetsDatacenterYml, map[string]*bintree{}},
		"dockerContainers.yml":           &bintree{assetsDockercontainersYml, map[string]*bintree{}},
		"dockerDevicemapperLoopback.yml": &bintree{assetsDockerdevicemapperloopbackYml, map[string]*bintree{}},
		"dockerIccFalse.yml":             &bintree{assetsDockericcfalseYml, map[string]*bintree{}},
		"dockerLoggingDriver.yml":        &bintree{assetsDockerloggingdriverYml, map[string]*bintree{}},
		"dockerVersion.yml":              &bintree{assetsDockerversionYml, map[string]*bintree{}},
		"loadavg.yml":                    &bintree{assetsLoadavgYml, map[string]*bintree{}},
		"memoryUsage.yml":                &bintree{assetsMemoryusageYml, map[string]*bintree{}},
		"os.yml":                         &bintree{assetsOsYml, map[string]*bintree{}},
		"osUptime.yml":                   &bintree{assetsOsuptimeYml, map[string]*bintree{}},
		"replicatedConfFormat.yml":       &bintree{assetsReplicatedconfformatYml, map[string]*bintree{}},
		"replicatedDiskPressure.yml":     &bintree{assetsReplicateddiskpressureYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
