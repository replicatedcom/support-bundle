// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/configManagement.yml
// pkg/analyze/api/v1/defaultspec/assets/cpuCores.yml
// pkg/analyze/api/v1/defaultspec/assets/datacenter.yml
// pkg/analyze/api/v1/defaultspec/assets/dockerDevicemapperLoopback.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigmanagementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\xc1\x8a\xdc\x30\x0c\xbd\xf7\x2b\x74\x5b\x68\xd9\x99\xf6\xea\x63\x17\x7a\x29\x5b\xca\xb2\xf4\x5a\x34\xb6\xe2\x08\x1c\xd9\x58\x4e\xd8\xf4\xeb\x4b\x26\x21\x71\x76\x4b\x67\x0e\x9d\x43\x73\x08\x58\x7a\x7a\x7a\x92\x1e\x0a\x86\xf1\x17\x99\x77\x00\xc3\xa7\xe9\x0f\x70\x0f\x82\x1d\x19\x48\x39\x5a\x52\x25\x3d\xd8\x28\x0d\xfb\x0e\x05\x3d\x75\x24\xe5\x90\xfa\x94\xa8\x9c\xd1\x00\x01\x4f\x14\xd4\x2c\x2f\x00\xb6\x51\xbe\xd2\x68\x60\x46\xfd\x0c\xd1\xc7\x25\x99\xc9\xb3\x16\xca\x3f\x30\x33\x9e\x02\x55\x55\x6b\x57\x5d\x43\x00\x0d\x07\x7a\xc4\x62\x5b\x53\x05\x01\x12\x96\xf6\x89\x3c\xbd\x24\xdd\x27\x26\x1a\x47\x0d\xf6\xa1\x1c\x6d\xec\x3a\x14\xa7\xc7\xa4\x47\x2d\x2e\xf6\x65\x07\xcd\xe7\xfa\x07\x4c\xa5\xcf\xf4\x9a\x65\x4e\x1a\xb8\x3b\x7c\x98\x87\x00\xf4\x24\x05\x0e\xef\xef\x5e\x21\x59\x1c\xbd\x18\xf8\xb8\x84\x6d\x14\xc7\x85\xa3\x6c\x8c\x33\xd7\x9b\x29\xd6\x16\xbb\x06\x1b\xfd\xb0\xac\xe8\x89\x9a\x6a\x29\x1d\xa9\xa2\xaf\xf7\xb6\x76\x7c\xce\xfd\x6e\x8e\x94\xb9\xc3\x3c\x1a\x78\x3c\xdf\xcd\xc1\xe7\x11\xbe\xd7\x77\x9b\x3e\x47\x05\x39\x18\x78\x6e\x59\x41\x29\x0f\x94\x81\x15\x72\x2f\xc2\xe2\x01\x97\x8a\x59\x5d\x55\xa7\x34\x50\xe6\x32\x1a\x60\x69\xe2\x5b\x31\x5f\x30\xe8\x9f\xd5\x7c\x8b\x57\xab\x90\x58\x2a\x25\xe9\x92\x12\x47\xa7\xde\x5f\xeb\x60\xdb\x52\x73\xc9\xbf\x13\xe6\x3f\x77\xef\x34\xc2\xbd\x0d\x3c\x8d\x7c\x03\xef\x56\xf4\x37\x76\xee\xc3\x76\xaf\xbf\x38\x66\x73\xcb\x84\x87\x59\xd9\xbf\xb2\xed\x75\x12\xf6\xa6\xbd\x24\x63\xf6\xec\xef\x00\x00\x00\xff\xff\x63\x43\x3d\x31\x85\x05\x00\x00")

func assetsConfigmanagementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigmanagementYml,
		"assets/configManagement.yml",
	)
}

func assetsConfigmanagementYml() (*asset, error) {
	bytes, err := assetsConfigmanagementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configManagement.yml", size: 1413, mode: os.FileMode(420), modTime: time.Unix(1555963118, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCpucoresYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xe3\x30\x10\x85\xef\xf9\x15\x83\x2f\x39\xc5\x61\xaf\xba\x86\xdd\xcb\xc2\xb2\x94\xa6\x97\x52\x8a\x2c\x3f\x07\x51\x69\x24\x46\x96\x8b\x1b\xf2\xdf\x8b\x82\x9b\x8a\xc6\x3e\x18\xf4\x86\x37\xef\x7d\xa3\x59\xbb\xf9\x03\x6a\x43\x34\xfd\x2a\x7f\xa2\x1d\xb1\xf6\x50\x64\x62\x36\x41\x90\xda\x9c\xf4\x09\xd7\x11\x91\xd3\x1d\x5c\x52\xcb\x8b\xc8\x9a\xc0\x7f\x31\x2b\x0a\xe9\xd5\xc4\xbc\xe8\x82\x93\x4d\x23\xe4\x49\x8b\xd5\x9d\x43\x65\xf8\xda\xce\xd9\x47\x09\xe6\xa6\x53\xc9\x3b\x94\x3c\x45\xe7\xcb\x22\x47\x81\x09\xdc\xdb\xd1\x06\xfe\x5e\xc1\x61\x54\x95\x0f\x3e\x8e\x73\x65\x2a\xdf\xb4\x04\x3f\x60\xf8\x19\xb5\xb2\x10\x93\x76\x8a\x9a\x51\x32\x9a\x45\xf4\x48\x85\xba\x2a\x5e\x77\xf9\xa3\x5d\x42\xdd\x21\x8a\xf5\x5a\x66\x45\x47\x7e\xe3\xf0\xce\xd5\xa8\xc7\xa8\xad\x53\x74\x08\xd9\xf5\xa5\x7b\x51\x20\xde\x32\x4a\xb3\x0e\x42\x61\xa0\xc3\xff\x23\x5d\xe9\x5b\xfa\xcd\x29\x0b\x68\x0e\x59\x28\x45\x98\x44\x96\x8d\xcb\x3d\x48\x93\x09\xde\x6b\xee\x29\xa4\x56\xa0\xfb\xdd\x60\x1d\x9e\x9b\x7d\xc1\xdb\x9b\x98\x2d\x0f\xa1\x79\x69\xab\xf4\x84\x09\x62\xcb\x7d\x7a\x74\xf9\x74\x9b\xdc\x50\x1e\x25\xaf\x93\x6c\xcf\x67\x41\x74\xd4\x2e\xe7\xbb\x5c\xb6\x2b\x54\xff\xee\x09\xc8\x26\xba\xf3\xae\x56\x2a\x75\x37\x9f\x01\x00\x00\xff\xff\x49\xc5\xa6\x19\x82\x02\x00\x00")

func assetsCpucoresYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsCpucoresYml,
		"assets/cpuCores.yml",
	)
}

func assetsCpucoresYml() (*asset, error) {
	bytes, err := assetsCpucoresYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cpuCores.yml", size: 642, mode: os.FileMode(420), modTime: time.Unix(1555957080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDatacenterYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xcf\x6e\x13\x31\x10\xc6\xef\x7d\x8a\x51\x2f\x05\xd1\xa6\xea\x75\x25\x0e\x65\x5b\x50\x05\x48\x55\xd2\xc2\xa1\x94\x6a\xe2\x9d\x6c\x06\xbc\xb6\xb1\xbd\x49\xd3\x28\xef\x8e\x9c\xe6\x8f\x37\xdd\x04\x36\x82\xdb\x5e\x22\x65\xe7\x9b\xcf\x33\xe3\xf9\xc9\xa8\x50\x4e\x9e\x28\x39\x00\x18\x9d\x85\x5f\x80\x13\x50\x58\x50\x02\x19\x7a\x14\xa4\x3c\xd9\x0e\x8e\xdd\x3c\x04\x20\xb1\x4f\xd2\x25\x8b\x7f\x00\x2c\xb4\xfa\x48\x93\x58\xfd\xb0\x56\x5b\xca\xd9\x79\xb2\x5f\xd0\x32\xf6\x25\x45\x89\xcb\x53\x4c\xd9\x97\x2c\xce\xb3\xcc\x92\x73\xab\x28\xc0\x80\x25\x7d\x46\x2f\x86\x49\xf4\x11\xc0\xa0\x1f\x76\x29\xa7\x47\xe3\xaa\x81\xe0\x78\x2a\xb4\xf2\xc8\x8a\xac\x3b\xb5\x64\x24\x0b\xf4\x94\x9d\x68\x43\x16\xbd\xb6\xdf\x3a\x3f\x9c\x56\x2f\xb3\x58\x39\x43\xc2\x37\x49\xa9\x91\x9e\x2c\x6c\x6a\x52\xec\xbc\xe0\x14\x8d\x2f\x2d\x6d\x96\xfd\x1c\x4c\xe0\xe8\xf0\xfa\xf6\xdd\xa7\xab\xf4\xe1\xfc\xe2\xa2\x7b\xd9\xeb\xbd\x7d\x75\xf7\xfd\xf0\xfe\xcd\xeb\xc3\xa3\x8d\x04\x56\x19\x3d\x26\x70\xf6\x72\x94\x56\x8f\x38\x23\x1b\xe9\xc7\x43\x16\xc3\x54\xea\x32\xab\x1e\x3b\x5a\x5c\x48\x97\x06\xf5\x57\x60\x2c\x09\xad\x32\xf6\xac\xd5\x3a\x55\x69\x1f\xfb\x50\x61\xfc\x24\x81\xe9\xec\xa0\x81\x73\x8d\xad\xf3\x96\x55\x9e\xea\xc2\x60\x75\x3e\xf4\x2b\x81\xf5\x36\x6d\x9a\x57\xdb\x2d\xc8\x39\xcc\xe3\x15\x5b\x9d\x74\x63\xcb\x8a\xad\xb1\x5c\xa0\x9d\x24\x70\xfe\xb5\x17\x7d\xce\xc8\x23\xcb\x04\x6e\x86\xec\x80\x1d\xa0\x0a\x02\x60\xe5\x3c\x2a\x41\x91\xd2\xd1\x88\x2c\x87\xde\x59\x0d\xf4\x36\x6a\xf2\x55\xce\xdf\x50\xb3\x56\xb7\xd4\x2c\xc7\xd0\x52\xb3\x2f\x35\x79\xb4\xaf\xff\x9a\x9a\x0f\xe9\xe5\x2e\x6a\x42\x7c\x7f\x68\xf0\xa9\xb4\x4d\xb0\x89\xf5\x2d\x38\xcb\x31\xb4\xe0\xec\xfd\xdc\x44\xfb\xf4\x1f\x1e\x9c\x8a\x7b\xfd\x93\x13\x24\xfb\xf3\x53\xaa\x9f\x4a\x8f\x55\x03\x82\xaa\x19\x2d\x43\xcb\x31\xb4\x0c\xed\x60\x68\xc3\x76\x2b\x52\xa1\xf7\x04\xee\x70\xec\x8e\x73\x41\xc7\x73\xba\xee\xb7\x9e\xfd\x27\xc0\xe2\x16\xdf\xa3\x74\xf5\x90\xdd\x56\x16\x1a\x22\xcc\x52\x5d\xca\x2c\xd4\x1e\xbe\x90\x2d\x58\xd1\xa2\x61\xb8\xba\x06\x7c\x6e\xba\x53\xcb\x5c\x46\xfd\x32\x6f\x40\x7a\xb3\x22\xd6\x38\x82\xd4\x02\x83\x33\xe8\xc1\xb2\x22\x98\x4e\xc3\xf6\x42\xa7\x72\x39\xb3\xd9\xae\x4a\x7f\x07\x00\x00\xff\xff\xbe\xc0\x1d\x60\xd9\x0d\x00\x00")

func assetsDatacenterYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDatacenterYml,
		"assets/datacenter.yml",
	)
}

func assetsDatacenterYml() (*asset, error) {
	bytes, err := assetsDatacenterYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/datacenter.yml", size: 3545, mode: os.FileMode(420), modTime: time.Unix(1555962349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerdevicemapperloopbackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcd\xae\xd3\x30\x10\x85\xf7\xf7\x29\x46\xd9\x5c\x10\xa2\x70\xb7\xde\x36\x62\xc3\x9f\x54\x55\x6c\xf8\xd3\x24\x99\x24\x43\x1d\xdb\x8c\xdd\xb4\x01\xf1\xee\x28\x21\x04\x3b\x2d\x52\xc5\x86\x4d\xa4\xcc\x78\xce\xf9\x8e\xc7\x68\x50\x0f\xdf\x48\xdd\x01\xf4\x0f\xe3\x17\xe0\x29\x18\xec\x48\x41\x65\xcb\x03\xc9\xa6\xa2\x9e\x4b\xea\xd0\x39\x92\x0d\xfb\x57\xd6\xba\x02\xcb\xc3\x74\x14\x40\x63\x41\xda\xab\xf9\x0f\x80\x4b\x6b\x5e\xd2\xf0\x7b\xfa\xf3\xa9\x45\x4d\x73\x57\xa8\x61\x1f\x48\xde\xa1\x30\x16\x9a\xa2\xb1\xc5\x53\xb8\x27\x59\xca\x00\x35\x6b\x7a\x8d\xa1\x6c\x55\x54\x04\x70\x18\xda\x1d\x35\x74\x76\x3e\x6d\x8c\x52\xcf\x66\x6f\x36\xb5\xfd\xb0\xf9\xe2\xad\x49\x8e\xc8\x34\xb7\x45\x17\x8e\x42\xeb\xe9\x5f\x4d\x05\xf7\x59\x3e\xa1\x64\x0a\xb2\x47\xef\x3f\x65\x1f\x9f\x3c\xce\xee\x57\x67\xd9\x54\x74\x56\xf0\x70\x91\x42\xa7\x77\xf4\x5f\x73\xe4\x18\x70\x02\x9a\x10\xfe\x12\xe1\xf9\x5c\x76\x42\xa5\x35\x15\x07\xb6\xe6\x8f\xa2\x0f\xc2\xa6\xd9\xda\xce\x61\x6a\x44\x5f\x15\xc4\xcf\x63\x69\xf5\xf3\x86\x77\x54\xaf\x76\x7a\x45\xde\xd8\x90\x88\x76\x2e\x0c\x0a\xbe\xff\x88\x6a\x89\xde\xea\x76\x3b\xf2\x1e\x9b\xf8\x31\x2d\x1e\x2f\x50\xfb\x04\xd8\x09\x77\x28\x83\x82\x3c\xa2\x1e\x01\x80\xcd\xb5\xad\x55\x14\x90\xb5\x82\x7c\x5a\x44\x92\x75\x8e\x05\x6f\xde\xee\xe3\xe1\xd1\xbc\xe6\x26\xd2\xf0\xd4\x93\xf0\x18\xa9\xa2\xe2\xd8\x5c\x52\xee\xe5\x78\x03\xe4\x89\x43\xfb\x8f\x88\x37\xe2\x9d\x50\xcc\xdd\xcf\x00\x00\x00\xff\xff\x82\x5e\xe6\x7c\x10\x04\x00\x00")

func assetsDockerdevicemapperloopbackYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerdevicemapperloopbackYml,
		"assets/dockerDevicemapperLoopback.yml",
	)
}

func assetsDockerdevicemapperloopbackYml() (*asset, error) {
	bytes, err := assetsDockerdevicemapperloopbackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dockerDevicemapperLoopback.yml", size: 1040, mode: os.FileMode(420), modTime: time.Unix(1556056173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\xc1\x4a\xc3\x40\x10\x86\xef\x3e\xc5\xbc\x80\x82\xd7\xbd\x49\x55\x04\x85\x42\xab\x5e\x65\xd2\x4c\xe3\xc0\x66\x36\xee\x6e\x0a\x51\x7c\x77\xa9\x94\x36\xd3\x84\x34\x81\x25\x97\x40\x96\xef\x9f\x7f\x98\x0f\x05\x6d\xf3\x4d\xe6\x0a\x60\x77\xbb\xff\x02\x5c\x83\x60\x49\x06\x5c\xb8\xa9\xb3\x5a\x62\xfd\xff\x0a\x60\x31\x23\x1b\xcc\xe1\x0f\x80\x37\x4e\x9e\xa9\xd9\x83\x1f\x0a\xf4\x54\x70\x88\xe4\xdf\xd1\x33\x66\x96\x5a\x99\xd3\xec\xe3\x13\x80\x0b\x06\x7e\x7e\x0f\x0f\x1b\x27\x39\x47\x76\x72\x0a\x85\xe8\x59\x8a\x85\x2b\x2b\xf4\x64\x5a\x41\xfa\x32\xa0\x9a\x01\x76\x87\xce\x15\x6d\x5b\x2d\x25\x85\x80\x45\x7b\x91\x63\xcd\xab\xaf\xd5\xcc\xca\x73\x89\xbe\x31\xb0\x5c\x03\x07\x78\xd3\xe3\x01\x72\x8a\xc8\xd6\xc0\xb2\x22\x8f\x91\xa5\x80\x75\x13\x22\x95\xbd\x70\xa0\x1d\x79\x8e\x8d\x01\x96\xad\xeb\x96\x3f\xa2\x0d\x43\xed\xe2\xe2\xb4\x0d\x7a\x03\xa7\x2d\x72\xca\xea\xe2\x5c\x32\xda\x8a\x85\x46\x48\x56\xe0\xac\x92\x55\x73\x7a\xc9\x77\x7a\xfc\xf0\x89\x3b\x70\x0a\xc9\x93\x36\xe8\x0d\x5c\x90\xbc\x21\x89\xc7\x4b\x0d\x49\x56\xe0\xac\x92\x55\x73\x7a\xc9\x0b\x92\xb8\x5c\x8f\x3c\x71\x07\x4e\x21\x79\xd2\x06\xbd\x81\x0b\x92\xfd\x27\xd9\x11\x8a\x5b\xd8\xac\x82\x5b\xbd\xe9\xf5\xae\x9e\x1e\x5e\x46\x9e\xf6\x0c\x4d\xa1\x76\x42\x7b\x0f\x7e\x41\x6b\x4e\x19\xa3\x8c\x10\xab\xc0\x59\xd5\xaa\xe6\xf4\x72\xef\xf5\xf8\xe1\x03\x77\xe0\x14\x82\x27\x6d\xd0\x1b\x38\x97\xfc\x17\x00\x00\xff\xff\x63\xdc\x7e\x31\x7a\x09\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2426, mode: os.FileMode(420), modTime: time.Unix(1555703226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configManagement.yml":           assetsConfigmanagementYml,
	"assets/cpuCores.yml":                   assetsCpucoresYml,
	"assets/datacenter.yml":                 assetsDatacenterYml,
	"assets/dockerDevicemapperLoopback.yml": assetsDockerdevicemapperloopbackYml,
	"assets/os.yml":                         assetsOsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configManagement.yml":           &bintree{assetsConfigmanagementYml, map[string]*bintree{}},
		"cpuCores.yml":                   &bintree{assetsCpucoresYml, map[string]*bintree{}},
		"datacenter.yml":                 &bintree{assetsDatacenterYml, map[string]*bintree{}},
		"dockerDevicemapperLoopback.yml": &bintree{assetsDockerdevicemapperloopbackYml, map[string]*bintree{}},
		"os.yml":                         &bintree{assetsOsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
