// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/configManagement.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigmanagementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x41\x8b\x1b\x31\x0c\x85\xef\xfb\x2b\x74\x0b\xb4\x24\x69\xaf\x3e\x76\xa1\x97\xb2\xa5\x87\xa5\xd7\xa2\xd8\x1a\x47\x60\xcb\xc6\xf2\x84\x9d\x96\xfe\xf7\x32\x3b\xd3\x8c\x87\x0d\x4d\x0e\x2d\x74\x73\x08\x8c\xfd\xf4\xf4\x59\x7a\x28\x18\x86\xef\x64\xee\x00\x4e\xef\xc7\x7f\x80\x2d\x08\x46\x32\x90\x4b\xb2\xa4\x4a\xba\xb3\x49\x3a\xf6\x11\x05\x3d\x45\x92\xba\xcb\x7d\xce\x54\x9f\xd5\x00\x01\x0f\x14\xd4\xcc\x5f\x00\x6c\x93\x7c\xa2\xc1\xc0\xa4\xfa\x16\x92\x4f\xf3\x65\x21\xcf\x5a\xa9\x7c\xc5\xc2\x78\x08\x74\xae\xda\x42\xc7\x81\x1e\xb0\xda\xe3\x62\x04\x90\xb1\x1e\x0d\x38\xea\xb0\x0f\x75\x6f\x53\x8c\x28\x4e\xf7\x59\xf7\x5a\x5d\xea\x6b\x23\x2d\xe4\xe9\x29\xdf\x63\xae\x7d\xa1\xd6\xe3\xf7\x95\x81\xcd\xee\xed\x84\x04\xe8\x49\x2a\xec\xde\x6c\x56\x3a\x16\x47\x4f\x06\xde\x9d\x0f\xe7\x39\xe8\x7c\x90\x0b\xd9\x24\x8e\x2b\x27\x59\x3a\x48\xaa\x6d\x3b\x8a\xb9\x0e\x06\x7e\xfc\x5c\xb1\x75\x8d\xcd\x05\x8f\x89\xf0\xc5\xf3\xcf\xe0\x2b\xec\xcd\xdd\x65\xdf\x48\xaa\xe8\xa9\xd9\xc4\xb9\xd3\x63\xe9\x57\x33\xc9\x85\x23\x96\xc1\xc0\xc3\xf3\x4e\x1d\x7c\x18\xe0\x4b\xbb\xd3\xf1\xe7\xa8\x22\x07\x03\x8f\x47\x56\x50\x2a\x27\x2a\xc0\x0a\xa5\x17\x61\xf1\x80\x73\xc5\x44\xd5\xd4\x29\x9d\xa8\xf0\x38\x04\x96\x2e\xbd\x84\xf9\x88\x41\x2f\xd3\x7c\x4e\x37\x53\x48\xaa\x0d\x49\xbe\x46\xe2\xe8\xd0\xfb\x5b\xd3\x6d\x8f\xd4\x5d\xcb\xf6\xa8\xf9\xaf\x92\x3d\x02\x6d\x6d\xe0\xf1\x01\xaf\x26\xd7\x0d\xf4\x3f\x4a\xf5\xfd\xb2\xcb\x3f\xa4\x69\x49\xd2\xa8\x87\x89\xe8\x6f\x45\xfa\x36\x84\x75\xa0\xaf\x61\x4c\x79\xfe\x15\x00\x00\xff\xff\x5c\xd9\xd3\xc2\xbd\x05\x00\x00")

func assetsConfigmanagementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigmanagementYml,
		"assets/configManagement.yml",
	)
}

func assetsConfigmanagementYml() (*asset, error) {
	bytes, err := assetsConfigmanagementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configManagement.yml", size: 1469, mode: os.FileMode(420), modTime: time.Unix(1555537879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\xc1\x4a\xc3\x40\x10\x86\xef\x3e\xc5\xbc\x80\x82\xd7\xbd\x49\x55\x04\x85\x42\xab\x5e\x65\xd2\x4c\xe3\xc0\x66\x36\xee\x6e\x0a\x51\x7c\x77\xa9\x94\x36\xd3\x84\x34\x81\x25\x97\x40\x96\xef\x9f\x7f\x98\x0f\x05\x6d\xf3\x4d\xe6\x0a\x60\x77\xbb\xff\x02\x5c\x83\x60\x49\x06\x5c\xb8\xa9\xb3\x5a\x62\xfd\xff\x0a\x60\x31\x23\x1b\xcc\xe1\x0f\x80\x37\x4e\x9e\xa9\xd9\x83\x1f\x0a\xf4\x54\x70\x88\xe4\xdf\xd1\x33\x66\x96\x5a\x99\xd3\xec\xe3\x13\x80\x0b\x06\x7e\x7e\x0f\x0f\x1b\x27\x39\x47\x76\x72\x0a\x85\xe8\x59\x8a\x85\x2b\x2b\xf4\x64\x5a\x41\xfa\x32\xa0\x9a\x01\x76\x87\xce\x15\x6d\x5b\x2d\x25\x85\x80\x45\x7b\x91\x63\xcd\xab\xaf\xd5\xcc\xca\x73\x89\xbe\x31\xb0\x5c\x03\x07\x78\xd3\xe3\x01\x72\x8a\xc8\xd6\xc0\xb2\x22\x8f\x91\xa5\x80\x75\x13\x22\x95\xbd\x70\xa0\x1d\x79\x8e\x8d\x01\x96\xad\xeb\x96\x3f\xa2\x0d\x43\xed\xe2\xe2\xb4\x0d\x7a\x03\xa7\x2d\x72\xca\xea\xe2\x5c\x32\xda\x8a\x85\x46\x48\x56\xe0\xac\x92\x55\x73\x7a\xc9\x77\x7a\xfc\xf0\x89\x3b\x70\x0a\xc9\x93\x36\xe8\x0d\x5c\x90\xbc\x21\x89\xc7\x4b\x0d\x49\x56\xe0\xac\x92\x55\x73\x7a\xc9\x0b\x92\xb8\x5c\x8f\x3c\x71\x07\x4e\x21\x79\xd2\x06\xbd\x81\x0b\x92\xfd\x27\xd9\x11\x8a\x5b\xd8\xac\x82\x5b\xbd\xe9\xf5\xae\x9e\x1e\x5e\x46\x9e\xf6\x0c\x4d\xa1\x76\x42\x7b\x0f\x7e\x41\x6b\x4e\x19\xa3\x8c\x10\xab\xc0\x59\xd5\xaa\xe6\xf4\x72\xef\xf5\xf8\xe1\x03\x77\xe0\x14\x82\x27\x6d\xd0\x1b\x38\x97\xfc\x17\x00\x00\xff\xff\x63\xdc\x7e\x31\x7a\x09\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2426, mode: os.FileMode(420), modTime: time.Unix(1555548538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configManagement.yml": assetsConfigmanagementYml,
	"assets/os.yml": assetsOsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configManagement.yml": &bintree{assetsConfigmanagementYml, map[string]*bintree{}},
		"os.yml": &bintree{assetsOsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

