// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1/defaultspec/assets/configManagement.yml
// pkg/analyze/api/v1/defaultspec/assets/os.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigmanagementYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xb1\x6e\xe3\x30\x0c\x40\xf7\x7c\x05\xb7\x00\x77\x88\x73\xb7\x6a\xbc\x00\xb7\xe5\x70\x43\xd0\x9d\xb1\x68\x59\x80\x45\x09\xa2\x1c\xc4\x2d\xfa\xef\x85\x63\x27\x96\x91\xa0\xc9\xd0\x02\xad\x07\x0f\x14\x45\x3e\x91\x0f\x19\x9b\xee\x99\xd4\x02\xe0\xf0\xbb\xff\x03\xac\x80\xd1\x91\x82\x10\x7d\x49\x22\x24\x45\xe9\xb9\xb2\xc6\x21\xa3\x21\x47\x9c\x8a\xd0\x86\x40\xe9\x94\x0d\x10\xc9\x58\x49\x14\x9f\x30\x5a\xdc\x37\x24\x6a\x3c\x58\x41\x65\x1b\xda\x62\x2a\xeb\x73\xa8\xff\x02\xa6\x5a\x81\xa6\x0a\xdb\x26\xad\x4b\xef\x1c\xb2\x96\x75\x90\xb5\x24\xed\xdb\x94\xa5\x46\x32\x74\x0c\x1b\x0c\xa9\x8d\x94\xd7\x38\x1f\x29\x58\x16\x3f\x07\x1a\x40\x43\x9c\xa0\xf8\xb1\x9c\xe5\x59\xd6\x74\x54\xf0\xeb\x12\x1c\x1f\x27\x63\x20\x44\x2a\x3d\x6b\x9b\xac\xe7\xa9\x03\xfb\x94\xb7\x23\x17\x52\xa7\xe0\xe5\x75\xc6\x56\x65\x65\x6e\xd4\x18\x08\xaf\x9e\x7f\x01\x9f\x61\x2f\x17\xb7\xeb\x3a\x12\x41\x33\xcd\x34\xeb\xb4\x8b\xed\x6c\x26\x21\x5a\x87\xb1\x53\xb0\x3d\x2d\x4a\xc3\x9f\x0e\xfe\xe7\x8b\xea\x3f\x4d\x09\x6d\xa3\x60\x57\x5b\x01\xa1\x78\xa0\x08\x56\x20\xb6\xcc\x96\x0d\xe0\x78\x63\xa0\xca\xee\x09\x1d\x28\xda\x7e\x08\x96\x2b\x7f\x0d\xf3\x17\x1b\xb9\x4d\xf3\xcf\x3f\x4c\xc1\x3e\x65\x24\xe1\x1e\x89\xa6\x7d\x6b\x1e\x55\xb6\xac\xa9\xfa\x2a\xc2\xf6\x2c\xab\xb2\xb1\x3d\xd7\xb7\xd1\x35\x83\xfe\x24\x59\x37\xd3\x8a\xde\x91\x64\x12\xa4\xcf\x87\x81\xe8\xa3\x4c\x7d\x0c\x61\xee\xe9\x3d\x8c\x41\xd3\xb7\x00\x00\x00\xff\xff\xc6\x38\xdd\x98\x69\x05\x00\x00")

func assetsConfigmanagementYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigmanagementYml,
		"assets/configManagement.yml",
	)
}

func assetsConfigmanagementYml() (*asset, error) {
	bytes, err := assetsConfigmanagementYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configManagement.yml", size: 1385, mode: os.FileMode(420), modTime: time.Unix(1555456313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsOsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\xcd\x4a\xc4\x30\x10\xc7\xef\x3e\xc5\xbc\x80\x82\xd7\xdc\x64\x55\x3c\x08\x0b\x56\xbd\x4f\xb7\xb3\x75\x20\x9d\xd4\x24\x5d\xa8\xe2\xbb\xcb\xca\xd2\x6d\xda\xd0\x6e\x21\xd8\x4b\x0f\xe9\xff\x8b\xf9\xa1\xa0\x6e\xbf\x48\x5d\x01\x1c\x6e\x8f\x5f\x80\x6b\x10\xac\x48\x81\x71\x37\x4d\xde\x88\x6f\xfe\x5e\x01\x2c\x95\xec\x3c\xd9\x77\xb4\x8c\xb9\x26\xa7\x4e\x3f\xfa\x96\xee\x09\xc0\x38\x05\xdf\x3f\xa7\x87\x9d\x91\x82\x3d\x1b\x39\x9b\x9c\xb7\x2c\xe5\xc6\x54\x35\x5a\x52\x3d\x23\x7d\x2a\x08\x9a\x8f\xdd\xfb\x5e\x7a\x45\xce\x61\xd9\x1f\xd0\xc5\xbf\xda\x26\xc8\xaa\x2d\x57\x68\x5b\x05\xdb\x0c\xd8\xc1\x5b\x18\x0b\x50\x90\x47\xd6\x0a\xb6\x35\x59\xf4\x2c\x25\x64\xad\xf3\x54\x45\xc5\x8e\x0e\x64\xd9\xb7\x0a\x58\xf6\x66\x5c\xfe\x88\xda\x4d\xb5\x8b\xf1\xcb\x16\x44\x0d\xe7\x15\x05\xe5\x4d\x39\x64\x86\xba\x66\xa1\x35\x98\x05\xcd\xe9\x98\xdd\x85\xb1\xd3\x17\x1b\x89\x53\x30\x5b\xb4\x20\x6a\x98\x61\xb6\x23\xf1\xdd\xa5\xfe\x95\x59\xd0\x9c\x8e\xd9\x86\xc4\x6f\xb3\x0b\x2f\x36\x12\xa7\x60\xb6\x68\x41\xd4\x30\xc3\xcc\x7e\x90\x5e\x83\x58\xaf\x37\x1d\xaf\x97\xa7\x87\xe7\x0b\x6f\x35\x90\xa6\x60\xb5\xa0\x3d\x22\x9f\xe1\x54\x50\xce\x28\x6b\x90\x0a\x9a\xd3\xb1\xba\x0f\x63\xa7\xef\x35\x12\xa7\xe0\xb5\x68\x41\xd4\x30\x64\xf6\x1b\x00\x00\xff\xff\xf6\x94\x3b\xb9\x87\x08\x00\x00")

func assetsOsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsOsYml,
		"assets/os.yml",
	)
}

func assetsOsYml() (*asset, error) {
	bytes, err := assetsOsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/os.yml", size: 2183, mode: os.FileMode(420), modTime: time.Unix(1555435321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configManagement.yml": assetsConfigmanagementYml,
	"assets/os.yml":               assetsOsYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configManagement.yml": &bintree{assetsConfigmanagementYml, map[string]*bintree{}},
		"os.yml":               &bintree{assetsOsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
