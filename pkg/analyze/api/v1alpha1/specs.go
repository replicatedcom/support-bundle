// Code generated by go-bindata.
// sources:
// pkg/analyze/api/v1alpha1/specs/analyzer_kubernetes_total_memory.yml
// pkg/analyze/api/v1alpha1/specs/analyzer_kubernetes_version.yml
// DO NOT EDIT!

package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _specsAnalyzer_kubernetes_total_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x6b\xdb\x50\x10\xbc\xe7\x57\x0c\xbe\xa4\x39\x44\x3f\xc0\x87\x1e\x02\x0d\x34\x25\xd0\xd6\xb9\x95\x1e\xd6\xd2\x3a\x59\x78\x1f\xf6\xee\x3e\x17\x21\xeb\xbf\x17\x49\x8e\xe4\x94\x16\x4a\xa9\x4e\x7a\xfb\x66\x76\x66\x67\x9f\xd2\x8f\xf5\x15\x50\xe7\xd4\x88\x4b\x4e\x36\x9c\x80\x5b\xf0\x91\xc2\xf4\x3f\x7c\x79\xcf\x4a\x9e\x75\x0d\x4a\xcd\x5c\x35\x27\xe7\xc8\xc9\x6d\x41\x0e\xdc\xeb\xae\x53\xde\x07\x54\x1f\xe2\xde\xdb\xbe\xbf\x9e\x6f\x8f\xa4\x42\xdb\xc0\xbf\x10\x46\xdc\x7a\xe6\xa5\xec\xa8\xbe\xf2\x6e\x61\x1a\x1f\x59\x65\xc0\xb0\x6a\xd6\x73\x35\xb2\x19\x3d\xf3\x1a\xef\x6f\xe7\x76\xf7\x24\x81\x1b\x78\x46\xc3\xce\xb5\xe3\x53\xd9\xb2\x26\x76\x36\x78\x76\x0a\x88\x1c\xb3\xb6\xff\x71\xcc\xe0\x78\xf7\x99\xd4\xf8\x63\x72\x54\x8f\x63\xfb\x9b\x37\x25\x49\x37\x7f\x91\xc2\xc4\x5c\x62\x78\x38\x8c\x29\x60\x55\x89\x73\xb4\x6f\xdf\xab\xc1\x49\xb1\xaa\xa6\x3d\xd5\xe2\x6d\x35\x8d\xb2\xc2\x09\x0f\x87\xc7\x29\x0c\x7b\xca\x1b\x57\x49\xcf\x9b\x20\x35\xe3\x84\x4d\x89\x5f\x0a\x25\x17\x17\xb6\x4b\x17\xa3\xa4\xa4\x45\x6f\x34\x7c\xc6\xb6\x58\x75\x5d\x37\x38\xef\xfb\x7e\xf5\x2f\x8b\x78\xba\x08\x1b\xbb\xac\x68\x73\xd1\xcb\x6d\xd4\xa1\x98\xb3\xe2\xac\xfe\x9b\x08\x4f\xb8\xcf\x1a\xc9\x5f\x3d\xf5\xfd\x1d\xc4\x10\xd8\x0c\xfe\x42\x09\xfe\xc2\x88\x92\x24\x96\x38\xeb\x2a\x1f\x8a\x28\x37\xaf\xd2\x79\x87\x65\x92\xbb\xab\xd9\xea\x1f\xde\x05\x62\x31\xc7\x96\x41\x8e\xc0\x64\xfe\x86\x8d\x9f\x01\x00\x00\xff\xff\x75\x35\xd6\x97\x30\x03\x00\x00")

func specsAnalyzer_kubernetes_total_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_specsAnalyzer_kubernetes_total_memoryYml,
		"specs/analyzer_kubernetes_total_memory.yml",
	)
}

func specsAnalyzer_kubernetes_total_memoryYml() (*asset, error) {
	bytes, err := specsAnalyzer_kubernetes_total_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specs/analyzer_kubernetes_total_memory.yml", size: 816, mode: os.FileMode(420), modTime: time.Unix(1531857771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsAnalyzer_kubernetes_versionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x31\x6f\xe3\x30\x0c\x85\xf7\xfc\x8a\x07\x2f\xb9\x1b\x62\xdc\xec\xe1\x96\xa2\x1d\x52\x64\x69\x82\x02\x1d\x95\xf8\xc5\x11\x60\x49\x0e\x45\xbb\x28\x5c\xff\xf7\xc2\x71\xaa\x00\x69\x86\xa2\xa8\x26\x92\xe2\x7b\x22\x3f\x89\x79\x2d\x66\xc0\x2e\xf8\xd2\xaa\x0d\x3e\x8e\x19\xb0\x00\x3b\x53\x4f\xf1\x78\x42\x43\x31\x1a\xa4\x80\xf1\x65\xaa\x46\x35\x4a\x47\xaf\xf1\xd2\x39\x6a\xe7\x7d\x2f\x6c\x6a\xe4\xf7\xae\xd1\xb7\x61\x98\xa7\xdb\xce\x88\x35\xdb\x9a\x57\x82\x53\x5f\x91\x74\x3e\x28\xf2\x27\xee\x2f\xca\xc8\x8e\x62\xc7\x1e\x8a\x04\x39\x57\x1d\x63\x34\x15\x0b\xfc\x5f\x24\xbb\x07\x63\x6b\x96\xd0\x80\x92\xca\x9d\xe2\xb1\xdd\x52\x3c\x95\x11\x1d\x25\xda\xe0\x7f\x71\xc3\x35\x5d\x47\xb9\x0b\xae\x31\x42\xe4\x53\x8a\xac\xef\xfb\x73\xbc\xb2\x7e\x18\x86\x0c\xef\xa8\x88\x7f\xdf\x40\x31\xc9\x2e\x2c\x36\x62\x1d\xfe\x2c\x8f\x27\x20\xc8\xf2\xca\xea\xf3\xb4\xc6\x68\xba\x3c\xae\x26\x06\x71\x13\xd6\x2a\xd6\x57\x7f\x91\x75\xd9\x4f\xc0\xbd\x84\x56\x6e\xc0\xc2\xe7\x5f\x4e\x83\x0d\x03\x6c\x44\xcd\x18\xa1\x07\xe3\xa1\x07\xc2\x59\x6f\x5d\xeb\x92\x93\xf0\xd8\x5a\x61\x99\x2c\xc2\x1e\xd7\x44\x66\x69\x84\x1b\x4f\xba\x36\x2a\xb6\x84\x51\xd4\x34\x51\xbf\xaa\x3f\x02\x00\x00\xff\xff\xd6\x00\xdf\xae\xb7\x02\x00\x00")

func specsAnalyzer_kubernetes_versionYmlBytes() ([]byte, error) {
	return bindataRead(
		_specsAnalyzer_kubernetes_versionYml,
		"specs/analyzer_kubernetes_version.yml",
	)
}

func specsAnalyzer_kubernetes_versionYml() (*asset, error) {
	bytes, err := specsAnalyzer_kubernetes_versionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specs/analyzer_kubernetes_version.yml", size: 695, mode: os.FileMode(420), modTime: time.Unix(1531857771, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"specs/analyzer_kubernetes_total_memory.yml": specsAnalyzer_kubernetes_total_memoryYml,
	"specs/analyzer_kubernetes_version.yml": specsAnalyzer_kubernetes_versionYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"specs": &bintree{nil, map[string]*bintree{
		"analyzer_kubernetes_total_memory.yml": &bintree{specsAnalyzer_kubernetes_total_memoryYml, map[string]*bintree{}},
		"analyzer_kubernetes_version.yml": &bintree{specsAnalyzer_kubernetes_versionYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

