// Code generated by go-bindata.
// sources:
// pkg/collect/bundle/defaultspec/assets/core.yml
// pkg/collect/bundle/defaultspec/assets/docker.yml
// pkg/collect/bundle/defaultspec/assets/kubernetes.yml
// pkg/collect/bundle/defaultspec/assets/replicated.yml
// DO NOT EDIT!

package defaultspec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCoreYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\x96\x90\x38\x6d\x36\x07\x24\x0e\x39\xaf\x38\x72\xe1\x88\x50\xe5\xb5\xc7\xa9\xb5\xfe\x87\x67\xdc\x00\x9f\x1e\x39\x4d\xc2\xee\x52\x25\x6e\xd7\x12\xf4\x50\xb5\xcd\x7b\xbf\xf7\xe4\x4e\xa6\xc5\x00\x02\xfb\xa6\x61\xec\x1d\xc3\x9f\x48\x60\x1b\xc6\x5a\xe6\xf1\x3e\x26\xd7\x0a\x6f\x2d\x77\xb2\x6f\xd8\xf4\x70\xdc\x42\xcf\x24\x27\x98\x3f\xf0\x89\x42\xa2\x83\xd4\xb1\x67\x12\x14\x4f\x86\xba\xd9\x83\xdd\xac\xdb\x81\xa9\xf9\x2d\x8f\x03\xf6\xec\x6b\xcb\xcd\xb7\x22\xb8\xba\x05\xad\x0b\xd9\x07\xed\xbc\x04\xdc\x8f\xb0\x80\x43\x11\x72\x16\x6e\xe3\x54\x04\x78\xd5\xd9\x16\x35\x9e\x8d\xdb\x74\x1d\x5e\xb1\xfd\x1d\xe3\x52\xc6\x3b\x86\x47\x3f\x16\xe5\xe8\x70\xc8\x8e\x43\x36\xdc\x94\x67\xb4\x7b\xba\x2e\x2f\x3b\x6e\xcf\x8b\x3e\x11\x5c\x17\x38\x59\xca\x12\x03\xbe\x4c\x54\x3c\xfd\x18\xc7\xb2\xa4\xb0\x4e\x97\xf1\x5c\xf2\xd3\xd0\x97\xb8\x66\xed\x62\x3d\x7a\xa4\xa9\x4a\x89\x77\x11\x2f\xe6\x14\x48\x17\x5a\xcf\xd2\xf5\x3c\x80\xcb\x56\x69\xb3\x7a\xf3\xeb\xc0\xe9\xd8\xb3\x0e\x48\x74\x0a\x89\x3f\x6e\x60\x81\x44\x29\xea\x59\xe7\x4a\x34\xac\x83\xf2\xd8\x46\x30\xc0\xb1\x52\xb5\xf3\xee\xad\xcb\x14\xe0\xa8\x76\xcf\x3c\x07\xbf\xbc\xab\x40\x0b\xd1\x8b\x4e\x84\xa4\x9d\xf2\x1b\xb4\x2c\x2b\xc6\x59\xb0\x55\x71\x3e\xb9\xcd\x81\xb9\x8a\xb6\xde\x44\x55\x68\x27\x88\xa8\xbd\xab\x86\xb3\x48\x9c\xf6\x68\xd3\xdf\x04\x07\x34\xfa\xf8\xa4\xdd\xc0\xde\x33\xa5\x23\x8c\xdc\x98\x2b\xe6\x5c\x78\xa7\xf4\xd0\xe9\x40\xfc\xd1\xc0\x72\xbc\x12\x50\x44\x1d\x48\x7b\x97\x57\xf9\xf9\x1a\x5b\xe5\x0c\x81\x48\xbb\x61\xe7\xf6\xfd\xc3\xbf\xbd\x50\xbb\x02\xfe\x97\x5e\x1f\xff\xf9\x49\x25\x8c\x9d\xd1\x8f\xdd\xa7\xf9\xeb\x7e\xb8\xd4\x65\x99\x05\x59\x52\x61\x26\x16\xff\xa6\x2c\xec\x37\x07\xe7\xf5\x34\xcd\xb1\x74\x58\x9a\x1e\x01\xbd\x39\xdd\xe7\xf3\xba\x94\xff\xf0\xf9\x0b\xfb\x5b\xf2\xc6\x4d\x2b\x1d\x5a\x8e\xdf\x27\x62\xbe\x7c\x29\xf8\xb9\xa6\x52\xea\x51\x84\x0f\xf9\xd9\x68\x70\xb4\x84\x5f\xcc\xce\x4a\xf6\x42\xb9\x33\x71\x93\xa3\xf9\x1d\x00\x00\xff\xff\x0e\x8f\xee\x7c\x72\x0c\x00\x00")

func assetsCoreYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsCoreYml,
		"assets/core.yml",
	)
}

func assetsCoreYml() (*asset, error) {
	bytes, err := assetsCoreYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/core.yml", size: 3186, mode: os.FileMode(420), modTime: time.Unix(1548448016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x51\x8e\xb4\x20\x10\x84\xdf\xe7\x14\x5c\x40\xc8\x9f\xfc\x4f\x5c\x66\x43\xa0\x75\x98\x45\x9a\x74\x37\x66\xbd\xfd\xc6\x11\x67\xcd\x64\xe3\xaa\x2f\x12\x53\xf5\x55\x49\x37\x17\xf0\x6c\x6f\x37\xa5\x3a\x15\xd0\x7f\x02\xe9\x98\x7b\xb4\x37\xf5\x7c\xb0\x4a\xa9\xf2\x11\x22\x59\x15\xa0\x77\x35\x89\x59\x65\x7b\xc7\x04\xc4\x11\xf3\x35\x53\x1c\xdd\x00\x5d\xe2\x6b\x2e\x8f\x59\x5c\xcc\x40\x3b\xa7\x4b\xc9\x2a\xa1\x0a\xe7\x48\xc8\x9a\xc0\x85\xae\x8f\x09\x36\xc4\x72\x2e\x4e\xee\x56\x19\x10\xdf\xd4\x26\x38\x18\x31\xeb\x07\x63\x6e\xba\x00\xec\x29\x16\x59\xfe\xb6\x55\x52\xab\x4a\xed\x54\xbf\x15\xf8\xc1\x9e\x2e\xf1\x5e\xfd\x10\xbd\x9e\xcf\xb2\x79\x66\x8f\xb9\x8f\xc3\x39\xfa\x4b\x7e\x81\x2f\x30\x86\xf6\x6e\x21\x9a\x81\xa6\xe8\x41\x07\x73\x17\x29\x5d\x21\xfc\x9a\x97\x89\xf6\x7f\xc7\x1f\xd1\xce\x94\x9a\x1c\x99\x84\x83\xa9\x85\xc5\xd1\x76\xa9\x3a\xe1\x70\x90\xfd\x66\x7a\xe6\x3c\xb0\x52\x76\x29\x2c\xd6\xd7\x06\xd6\x1c\x65\xdb\x87\xf6\x89\x63\xf6\x60\x55\xf7\xef\xbf\x0a\x6e\xe6\x83\x94\x8d\xb8\x8d\xe2\x3b\x00\x00\xff\xff\x00\x95\x34\x8a\x93\x03\x00\x00")

func assetsDockerYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerYml,
		"assets/docker.yml",
	)
}

func assetsDockerYml() (*asset, error) {
	bytes, err := assetsDockerYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/docker.yml", size: 915, mode: os.FileMode(420), modTime: time.Unix(1548448019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsKubernetesYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x41\x6e\xdc\x30\x0c\xbc\xef\x2b\x88\xf4\x6c\x3b\x6d\x0f\x45\x05\xb4\xa7\xbe\xa0\x1f\x58\x28\x12\x37\x56\x2c\x8b\xae\x48\xa5\xc8\xef\x0b\xc9\x5a\xc7\x4e\x0e\x71\xd0\xed\x61\xab\xa3\x4c\xce\x0c\x67\x28\x98\x27\x34\xac\x0e\x07\x80\x0f\x30\xa4\x3b\xf4\x28\x07\x80\x06\x1e\x28\xc5\xa0\xbd\x6d\x3d\xdd\xb3\x3a\x40\x39\x29\x38\x51\xab\xb2\x7c\x22\x3e\x62\x64\x54\x20\x31\x61\xbd\xa3\x24\x53\x92\xa3\x75\x51\x81\xc5\x93\x4e\x5e\xba\xdc\x15\x03\x0a\x72\x57\x01\xba\x0c\x3d\x33\x07\x3d\x22\x4f\xda\x60\x01\x6f\xf8\x89\x05\xc7\xa2\xc3\x92\x19\x30\x6e\x54\x58\x64\x13\xdd\x24\x8e\x82\x82\xef\x4d\xbd\x05\xf8\x51\x4a\x21\x97\xc2\x89\x22\x68\xef\x41\x7a\x04\x43\x41\xb4\x0b\x18\x19\xbc\xce\xcc\x16\x7e\x3b\xe9\x97\x3e\x47\xed\xb3\xb8\x76\x22\xdb\x2e\x72\xbe\x6d\xe5\xe4\x23\x6e\x44\x4a\x72\x64\x34\x14\x2c\x2b\xf8\x78\x7b\x5b\x3f\x2d\x44\xc7\xac\xe1\x48\x45\xe2\x22\x7b\x6e\x65\xd1\xe3\xc4\x0a\x4e\xda\x33\xbe\xee\x73\x2c\xaf\xfb\xb4\xf7\x1b\x7b\x01\x4e\xce\x0b\xc6\x55\x09\xcc\xa3\xad\x2f\xb2\x7b\xef\x1b\x6d\x47\x6c\xb5\x61\x8e\x6e\x95\xcf\x32\x42\xe3\x42\x5e\x29\xd9\x19\x56\xad\xfe\x87\x79\x5d\xa1\xb9\xd5\x94\xf9\x69\x44\xa2\xe1\xbd\x2f\xe1\x27\xd1\xf0\x3c\x38\xd4\xb0\x5e\xaa\x58\xd3\xbb\x20\x98\xdf\x7b\x09\xb6\xab\x9c\xff\xd5\xba\xaf\x66\x7a\x23\x8a\x5c\xf9\xf7\x0b\xfe\x22\x83\x73\xa6\x57\x64\xc1\x66\x0d\x51\x8c\x2d\x7e\x10\xb7\xbd\xc8\xd4\x44\xfc\x95\x90\x17\x1b\x52\xf4\x0a\xf2\x07\xd5\x75\x9e\x8c\xf6\x3d\xb1\xa8\x4f\x9f\xbf\x7c\xed\x46\x94\xe8\xcc\x79\x03\x47\x94\x9e\xac\x82\xfb\xe5\x0f\xf2\x86\x96\xda\xde\x15\x05\x45\x4b\x2d\x2a\x72\x56\xc3\x46\x64\x4a\xd1\x60\x93\x3d\x3d\xeb\x1a\x5c\xb0\x19\x76\xf2\xf4\x34\x62\x90\xb3\x8c\xc5\x15\x05\x37\x37\x3b\x4d\xa9\xf8\xdc\x6d\xe1\xf6\x8a\xc0\xc7\x4b\xf1\x2f\x48\x7b\xa9\x1f\xe8\xee\x22\xc4\x15\x67\x2f\xed\x44\xf6\x22\xb4\x05\xe7\x4f\x00\x00\x00\xff\xff\x0c\x49\x2e\x65\xaa\x08\x00\x00")

func assetsKubernetesYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsKubernetesYml,
		"assets/kubernetes.yml",
	)
}

func assetsKubernetesYml() (*asset, error) {
	bytes, err := assetsKubernetesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/kubernetes.yml", size: 2218, mode: os.FileMode(420), modTime: time.Unix(1548448762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsReplicatedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xb1\x6e\xeb\x30\x0c\x45\x77\x7f\x05\x81\xcc\x7e\xde\x3d\xbf\xb1\x40\x96\xee\x81\x2a\x31\x29\x61\x59\x12\x48\x2a\xfd\xfd\xc2\xb6\x9a\x2a\xc9\xe2\x40\x53\xbd\xf9\x52\x24\xef\xa1\x44\x49\x68\x65\xec\x3a\x80\x03\x04\xa3\x74\xc5\x0e\xa0\x07\x17\xed\x84\xfc\xcf\xc6\xa0\x86\x02\x72\x4f\x61\x39\xa9\x63\x07\xeb\x77\x0b\x9c\x3c\x89\x9e\x62\x52\x8a\x41\x7e\xa2\x00\xc6\xfb\x11\x94\x33\xde\x94\x33\x79\x45\xae\x8e\x00\x04\x33\x63\xfd\xbf\x34\x66\x4c\x9e\xac\x51\x74\x4f\x01\x65\x63\x9f\xe4\xc4\x38\x4f\xa4\x0f\xaa\x68\x76\x14\x8b\x18\xb3\xa6\xac\x27\x47\x3c\x82\xc3\xb3\xc9\x5e\x87\xdf\x36\xc3\x46\x3d\x14\xc0\x9a\xde\xc7\x8b\xfc\x29\x60\x80\x97\x90\x17\xbe\xed\xe6\xe5\xcb\xf0\x5c\xa3\x8b\x1a\x3b\xf5\x82\x7c\x25\x8b\x7d\x3d\x88\x85\x41\x92\xb1\x38\x3e\x5b\x77\x28\x96\x69\x1d\xcd\x08\x6f\xf1\x22\x70\xe6\x38\x43\x29\x23\x40\x01\xf4\x13\xab\x3c\x58\xfb\xec\x33\xbd\x7a\xbc\x13\x2a\x77\x0d\xde\xfb\x87\x41\xef\x86\xd8\xb2\x5a\x10\x6e\xad\x87\x56\x86\xfb\x57\xb1\x13\xa1\x24\x35\x11\x94\x1a\xcd\x00\xa2\x46\xe5\xc5\x2b\xd8\x72\x9a\xec\x6f\x25\xca\x26\x1c\x60\xca\x1f\xc8\x01\x15\x65\x5d\x8b\xf7\xe3\xff\xe3\x77\x00\x00\x00\xff\xff\x0c\x4a\xd9\xc3\x21\x05\x00\x00")

func assetsReplicatedYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsReplicatedYml,
		"assets/replicated.yml",
	)
}

func assetsReplicatedYml() (*asset, error) {
	bytes, err := assetsReplicatedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/replicated.yml", size: 1313, mode: os.FileMode(420), modTime: time.Unix(1548448024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/core.yml": assetsCoreYml,
	"assets/docker.yml": assetsDockerYml,
	"assets/kubernetes.yml": assetsKubernetesYml,
	"assets/replicated.yml": assetsReplicatedYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"core.yml": &bintree{assetsCoreYml, map[string]*bintree{}},
		"docker.yml": &bintree{assetsDockerYml, map[string]*bintree{}},
		"kubernetes.yml": &bintree{assetsKubernetesYml, map[string]*bintree{}},
		"replicated.yml": &bintree{assetsReplicatedYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

