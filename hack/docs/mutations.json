[
  {
    "path": "properties.lifecycle.items",
    "merge": {
      "description": "`lifecycle` can be used to customize the end-customer's experience when generating/uploading support bundles"
    }
  },
  {
    "path": "properties.lifecycle",
    "merge": {
      "description": "`lifecycle` can be used to customize the end-customer's experience when generating/uploading support bundles"
    }
  },
  {
    "path": "properties.lifecycle.items.properties.message",
    "merge": {
      "description": "Adds a step to print a message to the end customer",
      "examples": [
        {
          "contents": "This process will collect a number of files from the host system to help you debug your problem"
        }
      ]
    },
    "replace": {
      "required": [
        "contents"
      ]
    }
  },
  {
    "path": "properties.lifecycle.items.properties.message.properties.contents",
    "merge": {
      "description": "is the message"
    }
  },
  {
    "path": "properties.lifecycle.items.properties.generate",
    "merge": {
      "description": "Adds a step that will generate a support bundle. It has one argument, use_defaults",
      "examples": [
        {
          "use_defaults": true
        }
      ]
    }
  },
  {
    "path": "properties.lifecycle.items.properties.generate.properties.use_defaults",
    "merge": {
      "description": "Whether to include the default support bundle files - cpu info, docker ps, etc"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"]",
    "merge": {
      "description": "Adds a step in which the end customer can upload a bundle to https://console.replicated.com for review by the vendor",
      "examples": [
        {
          "prompt": {
            "message": "Would you like to upload your generated support bundle for review? - ",
            "accept": "Bundle uploaded! SuperGoodTool support will get back to you within 24 hours",
            "decline": "Bundle was not uploaded, please send your bundle to SuperGoodTool support",
            "default": true
          }
        }
      ]
    },
    "replace": {
      "required": [
        "prompt"
      ]
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"].properties[\"prompt\"]",
    "merge": {
      "description": "Allows configuring an interactive prompt for the user to confirm before uploading"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"].properties[\"prompt\"].properties[\"accept\"]",
    "merge": {
      "description": "A message to display if the user accepts the upload prompt"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"].properties[\"prompt\"].properties[\"decline\"]",
    "merge": {
      "description": "A message to display if the user declines the upload prompt"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"].properties[\"prompt\"].properties[\"default\"]",
    "merge": {
      "description": "The default answer to the prompt"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"upload\"].properties[\"prompt\"].properties[\"message\"]",
    "merge": {
      "description": "Message to display before prompting"
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"notes\"]",
    "merge": {
      "description": "Adds a step to prompt the end customer to enter a note to be uploaded with the support bundle",
      "examples": [
        {
          "prompt": "Please enter a note for the support bundle: "
        }
      ]
    }
  },
  {
    "path": "properties.lifecycle.items.properties[\"notes\"].properties.prompt",
    "merge": {
      "description": "the message prompt to display to the end customer for entering a note"
    }
  },
  {
    "path": "properties.collect",
    "merge": {
      "description": "A list of items to include in the support bundle"
    }
  },
  {
    "path": "properties.collect.properties.v1",
    "merge": {
      "description": "The v1 collect definition"
    }
  },
  {
    "path": "properties.collect.properties.v1.items",
    "merge": {
      "description": "A list of items to include in the support bundle"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties.description",
    "merge": {
      "description": "A description of the file(s) that will be collected by this spec",
      "examples": [
        "The contents of any files in /etc/supergoodtool/conf.d, with secrets redacted",
        "Information about running Docker containers"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties.meta",
    "merge": {
      "description": "Can be used to organize and identify analyze elements"
    },
    "examples": [
      {
        "meta": {
          "name": "kubernetes-version",
          "labels": {
            "source": "kubernetes"
          }
        }
      }
    ]
  },
  {
    "path": "properties.collect.properties.v1.items.properties.meta.properties.labels",
    "delete": [
      "properties"
    ],
    "merge": {
      "description": "Key,value pairs used to organize and identify analyze elements",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      }
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties.meta.properties.name",
    "delete": [
      "properties"
    ],
    "merge": {
      "description": "Name used to organize and identify analyze elements"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-cp\"]",
    "replace": {
      "required": [
        "src_path",
        "output_dir"
      ],
      "oneOf": [
        {
          "required": [
            "container"
          ]
        },
        {
          "required": [
            "labels"
          ]
        }
      ]
    },
    "merge": {
      "description": "Collect a file by copying from a running docker container",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-cp": {
            "description": "the supergoodtool www site access logs",
            "container": "supergoodtool-www",
            "src_path": "/var/log/nginx/access.log",
            "output_dir": "/www/access/"
          }}]}
        },
        {
          "collect": {"v1": [{"docker.container-cp": {
            "description": "the supergoodtool www site access logs",
            "labels": ["container.name.label"],
            "src_path": "/var/log/nginx/access.log",
            "output_dir": "/www/access/"
          }}]}
        },
        {
          "collect": {"v1": [{"docker.container-cp": {
            "description": "the supergoodtool www site access logs",
            "labels": ["container.name.label"],
            "src_path": "/var/log/nginx/access.log",
            "output_dir": "/www/access/",
            "include_empty": true
          }}]}
        }
      ],
      "_ext_outputs": [
        { "path": "{{.Name}}", "description": "Output will match the name of the file. If `src_path` is `/var/log/nginx/access.log`, then `output_dir` will contain a file `access.log`"},
        { "path": "{{.Name}}", "description": "Output will match the name of the file. If `src_path` is `/var/log/nginx/access.log`, then `output_dir` will contain a file `access.log`"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-cp\"].properties.container",
    "merge": {
      "description": "The name of the container to copy from",
      "example": "my-sweet-app",
      "examples": [
        "my-sweet-app"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-cp\"].properties.src_path",
    "merge": {
      "description": "The path of the target file in the container's filesystem",
      "example": "/var/log/supergoodtool/access.log",
      "examples": [
        "/var/log/supergoodtool/access.log"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-cp\"].properties.labels",
    "merge": {
      "description": "Labels shared by the container(s) to copy from",
      "example": ["container.name.label"],
      "examples": [
        ["container.name.label"],
        ["container.name.label=myContainerName"],
        ["container.name.label=myContainerName", "cluster.name=primary"]
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"]",
    "merge": {
      "description": "Collect the stdout and stderr of `exec`-ing a command on a running docker container",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-exec": {
            "container": "supergoodtool-www",
            "output_dir": "/www/debug/",
            "exec_config": {
              "Cmd": [
                "nginx",
                "-t"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "stdout.raw", "description": "The standard output of the command"},
        {"path": "stderr.raw", "description": "The standard error of the command"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.container",
    "merge": {
      "description": "The name of the container to run the command in",
      "examples": [
        "supergoodtool-www"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config",
    "merge": {
      "description": "Same as would be passed to `docker exec`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go#L43)"
    },
    "replace": {
      "required": [
        "Cmd"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.AttachStderr",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.AttachStdin",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.AttachStdout",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Cmd",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Cmd.items",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Detach",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.DetachKeys",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Env",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Env.items",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Privileged",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.Tty",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-exec\"].properties.exec_config.properties.User",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"]",
    "merge": {
      "description": "Collect the `docker inspect` output for one or more running or stopped containers. One of `container` or `container_list_options` is required.",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-inspect": {
            "output_dir": "/containers/cooltool/www-stack",
            "container_list_options": {
              "All": true,
              "Filters": {
                "name": [
                  "www",
                  "nginx",
                  "dnsmasq"
                ]
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.Name}}.json", "description": "The json output of the inspect call. Will generate this file for each matched container"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container",
    "merge": {
      "description": "the container name"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options",
    "merge": {
      "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.All",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Before",
    "merge": {
      "description": "Same as `--before` option to `docker logs` "
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Filters",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Map of key-value pairs to filter on"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Latest",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Limit",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Quiet",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Size",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-inspect\"].properties.container_list_options.properties.Since",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"]",
    "merge": {
      "description": "Collect the stdout/stderr logs from one or more docker containers. One of `container` or `container_list_options` is required.",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-logs": {
            "output_dir": "/docker/cooltool/logs/www",
            "container_list_options": {
              "All": true,
              "Filters": {
                "name": [
                  "www",
                  "haproxy"
                ]
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.Name}}.stdout", "description": "The stdout logs. Will generate this file for each matched container"},
        {"path": "{{.Name}}.stderr", "description": "The stderr logs. Will generate this file for each matched container"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container",
    "merge": {
      "description": "A container name"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options",
    "merge": {
      "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.All",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Before",
    "merge": {
      "description": "Same as `--before` option to `docker logs` "
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Filters",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Map of key-value pairs to filter on"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Latest",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Limit",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Quiet",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Size",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_list_options.properties.Since",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Details",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Follow",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.ShowStderr",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.ShowStdout",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Since",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Tail",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Timestamps",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-logs\"].properties.container_logs_options.properties.Until",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect information about one or more containers",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-ls": {
            "output_dir": "/docker/cooltool/containers/",
            "All": true,
            "Filters": {
              "name": [
                "www",
                "haproxy"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "container_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.All",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Before",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Filters",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Latest",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Limit",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Quiet",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Size",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-ls\"].properties.Since",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"]",
    "merge": {
      "description": "Collect the stderr/stdout of running a single docker container",
      "examples": [
        {
          "collect": {"v1": [{"docker.container-run": {
            "description": "Listing of host's network interfaces",
            "output_dir": "/host/network",
            "container_create_config": {
              "Config": {
                "Cmd": [
                  "ip",
                  "addr",
                  "show"
                ],
                "Image": "debian:latest"
              },
              "HostConfig": {
                "AutoRemove": true,
                "NetworkMode": "host"
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "stdout.raw", "description": "The standard output of the container"},
        {"path": "stderr.raw", "description": "The standard error of the container"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config",
    "replace": {
      "required": [
        "Config"
      ]
    },
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.AdjustCPUShares",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config",
    "replace": {
      "required": [
        "Image"
      ]
    },
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.ArgsEscaped",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.AttachStderr",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.AttachStdin",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.AttachStdout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Cmd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Cmd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Domainname",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Entrypoint",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Entrypoint.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Env",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Env.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.ExposedPorts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.ExposedPorts.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Interval",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Retries",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.StartPeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Test",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Test.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Timeout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Hostname",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Image",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Labels",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Labels.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.MacAddress",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.NetworkDisabled",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.OnBuild",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.OnBuild.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.OpenStdin",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Shell",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Shell.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.StdinOnce",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.StopSignal",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.StopTimeout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Tty",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.User",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Volumes",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.Volumes.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Config.properties.WorkingDir",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.AutoRemove",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Binds",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Binds.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceReadBps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceReadIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceWriteBps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceWriteIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioWeight",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.BlkioWeightDevice",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CapAdd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CapAdd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CapDrop",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CapDrop.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Cgroup",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CgroupParent",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ConsoleSize",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ContainerIDFile",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuCount",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuPercent",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuPeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuQuota",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuRealtimePeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuRealtimeRuntime",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpuShares",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpusetCpus",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.CpusetMems",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DeviceCgroupRules",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DeviceCgroupRules.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Devices",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.CgroupPermissions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.PathInContainer",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.PathOnHost",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DiskQuota",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Dns",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Dns.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DnsOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DnsOptions.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DnsSearch",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.DnsSearch.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ExtraHosts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ExtraHosts.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.GroupAdd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.GroupAdd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.IOMaximumBandwidth",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.IOMaximumIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Init",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.IpcMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Isolation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.KernelMemory",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Links",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Links.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Config",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Config.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Type",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Memory",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.MemoryReservation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.MemorySwap",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.MemorySwappiness",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.BindOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.BindOptions.properties.Propagation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Consistency",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.ReadOnly",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Source",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Target",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions.properties.Mode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions.properties.SizeBytes",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Type",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Options",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Options.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.Labels",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.Labels.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.NoCopy",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.NanoCpus",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.NetworkMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.OomKillDisable",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.OomScoreAdj",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.PidMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.PidsLimit",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.PortBindings",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.PortBindings.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Privileged",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.PublishAllPorts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ReadonlyRootfs",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy.properties.MaximumRetryCount",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Runtime",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.SecurityOpt",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.SecurityOpt.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.ShmSize",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.StorageOpt",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.StorageOpt.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Sysctls",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Sysctls.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Tmpfs",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Tmpfs.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.UTSMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.Ulimits",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.UsernsMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.VolumeDriver",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.VolumesFrom",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.HostConfig.properties.VolumesFrom.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.NetworkingConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.container_create_config.properties.NetworkingConfig.properties.EndpointsConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.container-run\"].properties.enable_pull",
    "merge": {
      "description": "If `true`, allow this container to be pulled if not present"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"]",
    "merge": {
      "description": "Collect the stdout/stderr of executing a command in an already running docker container",
      "examples": [
        {
          "collect": {"v1": [{"docker.exec": {
            "container": "supergoodtool-www",
            "output_dir": "/www/debug/",
            "exec_config": {
              "Cmd": [
                "toolctl",
                "info",
                "--verbose"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "stdout.raw", "description": "The standard output of the command"},
        {"path": "stderr.raw", "description": "The standard error of the command"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.container",
    "merge": {
      "description": "The container name"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config",
    "merge": {
      "description": "Config options as would be passed to `docker exec`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go)"
    },
    "replace": {
      "required": [
        "Cmd"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.AttachStderr",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.AttachStdin",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.AttachStdout",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Cmd",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Cmd.items",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Detach",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.DetachKeys",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Env",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Env.items",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Privileged",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.Tty",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.User",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.exec\"].properties.exec_config.properties.User",
    "merge": {
      "description": "Same as would be passed to `docker exec`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.image-ls\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect a list of docker images present on the server",
      "examples": [
        {
          "collect": {"v1": [{"docker.image-ls": {
            "output_dir": "/cooltool/images/",
            "All": true,
            "Filters": {
              "label": [
                "com.supercooltool.app=supercooltool-enterprise"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "image_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.image-ls\"].properties.All",
    "merge": {
      "description": "Same as would be passed to `docker images`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.image-ls\"].properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker images`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.image-ls\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker images`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.images\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect a list of docker images present on the server",
      "examples": [
        {
          "collect": {"v1": [{"docker.images": {
            "output_dir": "/cooltool/images/",
            "All": true,
            "Filters": {
              "label": [
                "com.supercooltool.app=supercooltool-enterprise"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "image_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.images\"].properties.All",
    "merge": {
      "description": "Same as would be passed to `docker images`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.images\"].properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker images`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.images\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker images`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.info\"]",
    "merge": {
      "description": "Collect info about the Docker daemon",
      "examples": [
        {
          "collect": {"v1": [{"docker.info": {
            "output_dir": "/docker/daemon/",
            "timeout_seconds": 10,
            "description": "Info about the docker daemon"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "docker_info.json",
          "description": "A pretty-printed JSON representation"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"]",
    "merge": {
      "description": "Collect the stdout/stderr logs from one or more docker containers. One of `container` or `container_list_options` is required.",
      "examples": [
        {
          "collect": {"v1": [{"docker.logs": {
            "description": "The docker logs for all the containers labeled with com.supercooltool.onprem",
            "output_dir": "/docker/logs",
            "timeout_seconds": 100,
            "container_list_options": {
              "All": true,
              "Filters": {
                "label": [
                  "com.supercooltool.onprem=true"
                ]
              }
            },
            "container_logs_options": {
              "Timestamps": true
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.Name}}.stdout", "description": "The stdout logs. Will generate this file for each matched container"},
        {"path": "{{.Name}}.stderr", "description": "The stderr logs. Will generate this file for each matched container"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container",
    "merge": {
      "description": "A container name"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options",
    "merge": {
      "description": "Options to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.All",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Before",
    "merge": {
      "description": "Same as `--before` option to `docker logs` "
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Filters",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Map of key-value pairs to filter on"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Latest",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Limit",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Quiet",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Size",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_list_options.properties.Since",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Details",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Follow",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.ShowStderr",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.ShowStdout",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Since",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Tail",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Timestamps",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.logs\"].properties.container_logs_options.properties.Until",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.node-ls\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect information about the nodes in a Docker Swarm installation",
      "examples": [
        {
          "collect": {"v1": [{"docker.node-ls": {
            "description": "List of swarm nodes",
            "output_dir": "/swarm/nodes/",
            "Filters": {
              "name": [
                "cooltool-docker-swarm-"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "node_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.node-ls\"].properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker node ls`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.node-ls\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker node ls`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"]",
    "merge": {
      "description": "Collect information about containers",
      "examples": [
        {
          "collect": {"v1": [{"docker.ps": {
            "output_dir": "/docker/ps/",
            "All": true
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "container_ls.json",
          "description": "JSON output"
        }
      ]
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.All",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Before",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Filters",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Map of key-value pairs to filter on"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Latest",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Limit",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Quiet",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Size",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.ps\"].properties.Since",
    "merge": {
      "description": "Option to be used to filter the list of containers, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L61)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"]",
    "merge": {
      "description": "Collect the stderr/stdout of running a single docker container",
      "examples": [
        {
          "collect": {"v1": [{"docker.run": {
            "description": "Listing of host's network interfaces",
            "output_dir": "/host/network",
            "container_create_config": {
              "Config": {
                "Cmd": [
                  "ip",
                  "addr",
                  "show"
                ],
                "Image": "debian:latest"
              },
              "HostConfig": {
                "AutoRemove": true,
                "NetworkMode": "host"
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "stdout.raw", "description": "The standard output of the container"},
        {"path": "stderr.raw", "description": "The standard error of the container"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config",
    "merge": {
      "description": "Same as would be passed to `docker run`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/configs.go#L13)"
    },
    "replace": {
      "required": [
        "Config"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.AdjustCPUShares",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    },
    "replace": {
      "required": [
        "Image"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.ArgsEscaped",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.AttachStderr",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.AttachStdin",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.AttachStdout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Cmd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Cmd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Domainname",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Entrypoint",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Entrypoint.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Env",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Env.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.ExposedPorts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.ExposedPorts.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Interval",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Retries",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.StartPeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Test",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Test.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Healthcheck.properties.Timeout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Hostname",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Image",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Labels",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Labels.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.MacAddress",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.NetworkDisabled",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.OnBuild",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.OnBuild.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.OpenStdin",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Shell",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Shell.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.StdinOnce",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.StopSignal",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.StopTimeout",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Tty",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.User",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Volumes",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.Volumes.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Config.properties.WorkingDir",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.AutoRemove",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Binds",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Binds.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceReadBps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceReadIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceWriteBps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioDeviceWriteIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioWeight",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.BlkioWeightDevice",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CapAdd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CapAdd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CapDrop",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CapDrop.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Cgroup",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CgroupParent",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ConsoleSize",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ContainerIDFile",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuCount",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuPercent",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuPeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuQuota",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuRealtimePeriod",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuRealtimeRuntime",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpuShares",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpusetCpus",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.CpusetMems",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DeviceCgroupRules",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DeviceCgroupRules.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Devices",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.CgroupPermissions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.PathInContainer",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Devices.items.properties.PathOnHost",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DiskQuota",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Dns",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Dns.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DnsOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DnsOptions.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DnsSearch",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.DnsSearch.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ExtraHosts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ExtraHosts.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.GroupAdd",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.GroupAdd.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.IOMaximumBandwidth",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.IOMaximumIOps",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Init",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.IpcMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Isolation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.KernelMemory",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Links",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Links.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Config",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Config.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.LogConfig.properties.Type",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Memory",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.MemoryReservation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.MemorySwap",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.MemorySwappiness",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.BindOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.BindOptions.properties.Propagation",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Consistency",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.ReadOnly",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Source",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Target",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions.properties.Mode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.TmpfsOptions.properties.SizeBytes",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.Type",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Options",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.DriverConfig.properties.Options.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.Labels",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.Labels.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Mounts.items.properties.VolumeOptions.properties.NoCopy",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.NanoCpus",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.NetworkMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.OomKillDisable",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.OomScoreAdj",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.PidMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.PidsLimit",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.PortBindings",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.PortBindings.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Privileged",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.PublishAllPorts",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ReadonlyRootfs",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy.properties.MaximumRetryCount",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.RestartPolicy.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Runtime",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.SecurityOpt",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.SecurityOpt.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.ShmSize",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.StorageOpt",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.StorageOpt.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Sysctls",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Sysctls.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Tmpfs",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Tmpfs.properties[\".*\"]",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.UTSMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.Ulimits",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.UsernsMode",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.VolumeDriver",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.VolumesFrom",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.HostConfig.properties.VolumesFrom.items",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.Name",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.NetworkingConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.container_create_config.properties.NetworkingConfig.properties.EndpointsConfig",
    "merge": {
      "description": "Container create options as would be passed to `docker run`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.run\"].properties.enable_pull",
    "merge": {
      "description": "If `true`, allow this container to be pulled if not present"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"]",
    "merge": {
      "description": "Collect logs from a docker swarm service. One of `service` or `service_list_options` is required.",
      "examples": [
        {
          "collect": {"v1": [{"docker.service-logs": {
            "output_dir": "/swarm/services/www",
            "service": "cooltool-www"
          }}]}
        },
        {
          "collect": {"v1": [{"docker.service-logs": {
            "output_dir": "/swarm/services/core-stack",
            "service_list_options": {
              "Filters": {
                "name": [
                  "cooltool-www",
                  "cooltool-api",
                  "cooltool-worker"
                ]
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.Name}}.stdout", "description": "The stdout output of the logs call. Will generate this file for each matched service"},
        {"path": "{{.Name}}.stderr", "description": "The stderr output of the logs call. Will generate this file for each matched service"}
      ]
    },
    "replace": {
      "required": [],
      "oneOf": [
        {
          "required": [
            "service"
          ]
        },
        {
          "required": [
            "service_list_options"
          ]
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Details",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Follow",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.ShowStderr",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.ShowStdout",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Since",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Tail",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Timestamps",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.container_logs_options.properties.Until",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.service",
    "merge": {
      "description": "A single docker swarm service for which to collect logs"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.service_list_options",
    "merge": {
      "description": "Options for filtering all swarm services"
    },
    "replace": {
      "required": [
        "Filters"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.service_list_options.properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker service ls`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-logs\"].properties.service_list_options.properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker service ls`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ls\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect a list of docker swarm services",
      "examples": [
        {
          "collect": {"v1": [{"docker.service-ls": {
            "output_dir": "/swarm/services/list/",
            "description": "List of all services starting with `cooltool-`",
            "Filters": {
              "name": [
                "cooltool-"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "service_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ls\"].properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker service ls`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ls\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker service ls`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ps\"]",
    "merge": {
      "description": "Collect information about the tasks run by one or more services",
      "examples": [
        {
          "collect": {"v1": [{"docker.service-ps": {
            "output_dir": "/swarm/services/www/tasks/",
            "description": "List of all services starting with `cooltool-`",
            "Filters": {
              "name": [
                "cooltool-"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "service_ps.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ps\"].properties.Filters",
    "merge": {
      "description": "Same as would be passed to `docker service ps`",
      "additionalProperties": true
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.service-ps\"].properties.Filters.properties[\".*\"]",
    "merge": {
      "description": "Same as would be passed to `docker service ps`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"]",
    "merge": {
      "description": "Collect logs from one or more services in a stack",
      "examples": [
        {
          "collect": {"v1": [{"docker.stack-service-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core"
          }}]}
        },
        {
          "collect": {"v1": [{"docker.stack-service-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core",
            "labels": {}
          }}]}
        },
        {
          "collect": {"v1": [{"docker.stack-service-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core",
            "labels": {
              "com.replicated.excludelogs":"false",
              "abc":"xyz",
              "abc2":""
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.StackName}}_{{.ServiceName}}.stdout", "description": "The stdout output. Will generate this file for each matched service"},
        {"path": "{{.StackName}}_{{.ServiceName}}.stderr", "description": "The stderr output. Will generate this file for each matched service"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Details",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Follow",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.ShowStderr",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.ShowStdout",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Since",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Tail",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Timestamps",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.container_logs_options.properties.Until",
    "merge": {
      "description": "Same as would be passed to `docker logs`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.namespace",
    "merge": {
      "description": "The stack's namespace"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.service_list_options",
    "merge": {
      "description": "Options as would be passed to `docker stack services"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-logs\"].properties.labels",
    "merge": {
      "description": "A set of labels that must be present for the logs to be included",
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      }
    },
    "example": {
      "key": "value"
    },
    "examples": [
      {},
      {
        "key": "value"
      },
      {
        "key": "value",
        "key2": "",
        "key3": "value3"
      }
    ]
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ls\"]",
    "merge": {
      "description": "Collect information about services in a swarm stack",
      "examples": [
        {
          "collect": {"v1": [{"docker.stack-service-ls": {
            "output_dir": "/swarm/stacks/cooltool/services",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "service_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ls\"].properties.namespace",
    "merge": {
      "description": "The stack's namespace"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ls\"].properties.service_list_options",
    "merge": {
      "description": "Options as would be passed to `docker stack services"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ps\"]",
    "merge": {
      "description": "Collect information about the tasks running in a service",
      "examples": [
        {
          "collect": {"v1": [{"docker.stack-service-ps": {
            "output_dir": "/swarm/stacks/cooltool/service-tasks",
            "description": "Tasks owned by services in the cooltool stack",
            "namespace": "cooltool-core",
            "task_list_options": {
              "Filters": {
                "label": [
                  "com.cooltool.tier=www",
                  "com.cooltool.tier=api"
                ]
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "service_ps.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ps\"].properties.namespace",
    "merge": {
      "description": "The stack's namespace"
    }
  },
  {
    "TODO(dex)": "I don't know how SpecShared is getting into this part of the schema. For now just replace it out",
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-service-ps\"].properties.task_list_options",
    "replace": {
      "required": [],
      "properties": {
        "Filters": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "array"
            }
          }
        }
      }
    },
    "merge": {
      "description": "Options as would be passed to `docker stack ps`"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-task-logs\"]",
    "merge": {
      "description": "Collect logs from a docker swarm task",
      "examples": [
        {
          "collect": {"v1": [{"docker.stack-task-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core",
            "task_list_options": {
              "Filters": {
                "name": [
                  "redis.1"
                ]
              }
            }
          }}]}
        },
        {
          "collect": {"v1": [{"docker.stack-task-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core",
            "labels": {}
            }}]}
        },
        {
          "collect": {"v1": [{"docker.stack-task-logs": {
            "output_dir": "/swarm/stacks/cooltool/service-logs",
            "description": "Logs from services in the cooltool stack",
            "namespace": "cooltool-core",
            "labels": {
              "com.replicated.excludelogs":"false",
              "abc":"xyz",
              "abc2":""
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.TaskId}}.stdout", "description": "The stdout output. Will generate this file for each matched service task"},
        {"path": "{{.TaskId}}.stderr", "description": "The stderr output. Will generate this file for each matched service task"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-task-logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-task-logs\"].properties.namespace",
    "merge": {
      "description": "The stack namespace"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-task-logs\"].properties.task_list_options",
    "replace": {
      "required": [],
      "properties": {
        "Filters": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "array"
            }
          }
        }
      }
    },
    "merge": {
      "description": "Options for filtering stack tasks"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.stack-task-logs\"].properties.labels",
    "merge": {
      "description": "A set of labels that must be present for the logs to be included",
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      }
    },
    "example": {
      "key": "value"
    },
    "examples": [
      {},
      {
        "key": "value"
      },
      {
        "key": "value",
        "key2": "",
        "key3": "value3"
      }
    ]
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-logs\"]",
    "merge": {
      "description": "Collect logs from a docker swarm task"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-logs\"]",
    "merge": {
      "description": "Collect logs from a docker swarm task",
      "examples": [
        {
          "collect": {"v1": [{"docker.task-logs": {
            "output_dir": "/swarm/tasks/logs",
            "description": "Logs from cooltool tasks in the www and api tiers",
            "task_list_options": {
              "Filters": {
                "label": [
                  "com.cooltool.tier=www",
                  "com.cooltool.tier=api"
                ]
              }
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "{{.TaskId}}.stdout", "description": "The stdout output. Will generate this file for each matched service task"},
        {"path": "{{.TaskId}}.stderr", "description": "The stderr output. Will generate this file for each matched service task"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-logs\"].properties.task_list_options",
    "replace": {
      "required": [],
      "properties": {
        "Filters": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "array"
            }
          }
        }
      }
    },
    "merge": {
      "description": "Options for filtering stack tasks"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-logs\"].properties.container_logs_options",
    "merge": {
      "description": "Args as would be given to `docker logs`, as in [The Docker API](https://github.com/moby/moby/blob/master/api/types/client.go#L73)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-logs\"].properties.id",
    "merge": {
      "description": "The id of a single task"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-ls\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "List docker swarm tasks",
      "examples": [
        {
          "collect": {"v1": [{"docker.task-ls": {
            "output_dir": "/swarm/tasklist",
            "Filters": {
              "name": [
                "cooltool-api-",
                "cooltool-backend-"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "task_ls.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.task-ls\"].properties.Filters",
    "merge": {
      "description": "Filters for tasks",
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "array"
        }
      }
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"docker.version\"]",
    "merge": {
      "description": "Get the version of the docker server",
      "examples": [
        {
          "collect": {"v1": [{"docker.version": {
            "output_dir": "/docker/version"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "docker_version.json",
          "description": "JSON output"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"journald.logs\"]",
    "replace": {
      "required": [
        "unit",
        "output_dir"
      ]
    },
    "merge": {
      "description": "Collect logs from journald",
      "examples": [
        {
          "collect": {"v1": [{"journald.logs": {
            "output_dir": "/system/journald/cooltool-api",
            "reverse": true,
            "unit": "cooltool-api",
            "since": "2018-01-01"
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "logs.raw", "description": "The raw output the `journald` logs for the unit"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"journald.logs\"].properties.reverse",
    "merge": {
      "description": "Store logs in reverse chronological order"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"journald.logs\"].properties.since",
    "merge": {
      "description": "Since date for log collection"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"journald.logs\"].properties.unit",
    "merge": {
      "description": "Systemd unit from which to collect logs"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.api-versions\"]",
    "replace": {
      "required": [
        "output_dir"
      ]
    },
    "merge": {
      "description": "The API versions of the Kubernetes cluster",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.api-versions": {
            "output_dir": "/kubernetes/"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "api_versions.json",
          "description": "A json file holding a list of the API versions"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.cluster-info\"]",
    "replace": {
      "required": [
        "output_dir"
      ]
    },
    "merge": {
      "description": "Get the Kubernetes cluster info",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.cluster-info": {
            "output_dir": "/kubernetes/"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "cluster_info.json",
          "description": "A json file holding the Kubernetes cluster info"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"]",
    "replace": {
      "required": [
        "output_dir",
        "src_path"
      ],
      "oneOf": [
        {
          "required": [
            "pod"
          ]
        },
        {
          "required": [
            "pod_list_options"
          ]
        }
      ]
    },
    "merge": {
      "description": "Collect a file or directory from one or more kubernetes pods and containers. If the container name is not specified, files will be collected from all containers within the pods.",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.container-cp": {
            "output_dir": "/kubernetes/all-api-pod-logs",
            "pod": "cooltool-api-110212121-ab123ef",
            "namespace": "default",
            "src_path": "/logs/app.log",
            "timeout_seconds": 30
          }}]}
        },
        {
          "collect": {"v1": [{"kubernetes.container-cp": {
            "output_dir": "/kubernetes/api-pod-logs",
            "pod": "cooltool-api-110212121-ab123ef",
            "container": "api",
            "namespace": "default",
            "src_path": "/logs/app.log",
            "timeout_seconds": 30
          }}]}
        },
        {
          "collect": {"v1": [{"kubernetes.container-cp": {
            "output_dir": "/kubernetes/deployment-pod-logs",
            "pod_list_options": {"labelSelector": "run=api"},
            "src_path": "/logs/"
            }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "{{.Namespace}}/{{.Pod}}/{{.Container}}/",
          "description": "A directory holding files copied from the pod and containers specified. Each pod and container will have a directory. Used when neither a pod name or a namespace is provided."
        },
        {
          "path": "{{.Pod}}/{{.Container}}/",
          "description": "A directory holding files copied from the pod and containers specified. Each pod and container will have a directory. Used when a pod name is not provided."
        },
        {
          "path": "{{.Namespace}}/{{.Container}}/",
          "description": "A directory holding files copied from the pod and containers specified. Each container will have a directory. Used when a pod name is provided, but a namespace is not."
        },
        {
          "path": "{{.Container}}/",
          "description": "A directory holding files copied from the pod and containers specified. Each container will have a directory. Used when a pod name is provided."
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.container",
    "merge": {
      "description": "The Kubernetes container. If omitted, files will be copied from all containers in matched pods",
      "example": "api",
      "examples": [
        "api"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.namespace",
    "merge": {
      "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included",
      "example": "default",
      "examples": [
        "",
        "default",
        "kube-system"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.pod",
    "merge": {
      "description": "The Kubernetes pod",
      "example": "cooltool-api-110212121-ab123ef",
      "examples": [
        "cooltool-api-110212121-ab123ef"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.pod_list_options",
    "merge": {
      "description": "The Kubernetes pod query options (used when querying for a label selector)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.pod_list_options.properties[\"labelSelector\"]",
    "merge": {
      "description": "The Kubernetes pod label selector to query by",
      "example": "env",
      "examples": [
        "env=test",
        "env=production",
        "env=production,type=reporting",
        "type in (reporting, metrics)"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.container-cp\"].properties.src_path",
    "merge": {
      "description": "The path to copy from within the container",
      "example": "/logs/",
      "examples": [
        "/logs/",
        "/logs/api.log"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"]",
    "replace": {
      "required": [
        "output_dir"
      ],
      "oneOf": [
        {
          "required": [
            "pod"
          ]
        },
        {
          "required": [
            "list_options"
          ]
        }
      ]
    },
    "merge": {
      "description": "Collect the logs for one or more kubernetes pods",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.logs": {
            "output_dir": "/kubernetes/api-pod-logs",
            "pod": "cooltool-api-110212121-ab123ef",
            "namespace": "default",
            "pod_log_options": {
              "timestamps": true,
              "sinceSeconds": 1000000,
              "limitBytes": 1000000000
            },
            "timeout_seconds": 30
          }}]}
        },
        {
          "collect": {"v1": [{"kubernetes.logs": {
            "output_dir": "/kubernetes/api-pod-logs",
            "namespace": "default",
            "pod_log_options": {
              "timestamps": true,
              "sinceSeconds": 1000000,
              "limitBytes": 1000000000
            },
            "list_options": {
              "labelSelector": "type=reporting"
            },
            "timeout_seconds": 30
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "{{.Namespace}}/{{.Name}}.log",
          "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format. Used when a namespace is not provided."
        },
        {
          "path": "{{.Name}}.log",
          "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format."
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"].properties.namespace",
    "merge": {
      "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included",
      "example": "default",
      "examples": [
        "",
        "default",
        "kube-system"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"].properties.pod",
    "merge": {
      "description": "The Kubernetes pod",
      "example": "cooltool-api-110212121-ab123ef",
      "examples": [
        "cooltool-api-110212121-ab123ef"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"].properties.pod_log_options",
    "merge": {
      "description": "The Kubernetes pod log options",
      "example": {
        "timestamps": true
      },
      "examples": [
        {
          "timestamps": true
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"].properties.list_options",
    "merge": {
      "description": "The Kubernetes pod query options (used when querying for a label selector)"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.logs\"].properties.list_options.properties[\"labelSelector\"]",
    "merge": {
      "description": "The Kubernetes pod label selector to query logs by",
      "example": "env",
      "examples": [
        "env=test",
        "env=production",
        "env=production,type=reporting",
        "type in (reporting, metrics)"
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.resource-list\"]",
    "merge": {
      "description": "Collect a list of resources managed by the cluster",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.resource-list": {
            "output_dir": "/kubernetes/resources/deployments",
            "namespace": "default",
            "kind": "deployments"
          }}]}
        },
        {
          "collect": {"v1": [{"kubernetes.resource-list": {
            "output_dir": "/kubernetes/resources/services",
            "kind": "svc"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "resource.json",
          "description": "Logs pulled from Kubernetes pod. Kubernetes pulls logs from stdout/stderr into one output file. If a label selector is provided, it will create multiple log files following the same format."}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.resource-list\"].properties.kind",
    "merge": {
      "description": "The Kubernetes resource kind, as would be passed to `kubectl get`",
      "examples": [
        "deployments",
        "replicasets"
      ],
      "pattern": "^(componentstatuses|cs|configmaps|cm|daemonsets|ds|deployments|deploy|endpoints|ep|events|ev|horizontalpodautoscalers|hpa|ingresses|ing|jobs|limitranges|limits|namespaces|ns|networkpolicies|netpol|nodes|no|persistentvolumeclaims|pvc|persistentvolumes|pv|pods|po|podsecuritypolicies|psp|podtemplates|replicasets|rs|replicationcontrollers|rc|resourcequotas|quota|storageclasses|statefulsets|serviceaccounts|sa|services|svc|secrets)$"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.resource-list\"].properties.namespace",
    "merge": {
      "description": "The Kubernetes namespace. If no namespace is provided, results from all namespaces are included"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.resource-list\"].properties.resource_list_options",
    "merge": {
      "description": "An instance of metav1.ListOptions"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"kubernetes.version\"]",
    "merge": {
      "description": "Get the kubernetes version",
      "examples": [
        {
          "collect": {"v1": [{"kubernetes.version": {
            "output_dir": "/kubernetes/"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "server_version.json",
          "description": "A json file containing the version information of the Kubernetes cluster"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.hostname\"]",
    "merge": {
      "description": "Get the hostname",
      "examples": [
        {
          "collect": {"v1": [{"os.hostname": {
            "output_dir": "/system/hostname"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "stderr",
          "description": "The stdout from the command"
        },
        {
          "path": "stdout",
          "description": "The stdin from the command"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"]",
    "replace": {
      "required": ["url", "method"]
    },
    "merge": {
      "description": "Collect information about the response from making an HTTP request",
      "examples": [
        {
          "collect": {"v1": [{"os.http-request": {
            "output_dir": "/system/ping-ip",
            "url": "https://api.replicated.com/market/v1/echo/ip",
            "method": "get",
            "header": {
              "User-Agent": [
                "cooltool/supportbundle 0.11.1"
              ]
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "body",
          "description": "The response body"
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"].properties.body",
    "merge": {
      "description": "The request body"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"].properties.header",
    "merge": {
      "description": "One or more headers to send",
      "patternProperties": {
        ".*": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"].properties.insecure",
    "merge": {
      "description": "Set to `true` to skip TLS verification"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"].properties.method",
    "merge": {
      "description": "HTTP request method"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.http-request\"].properties.url",
    "merge": {
      "description": "The HTTP request URL"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.loadavg\"]",
    "replace": {
      "required": []
    },
    "merge": {
      "description": "Collect information about CPU load",
      "examples": [
        {
          "collect": {"v1": [{"os.loadavg": {
            "output_dir": "/system/load"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "contents",
          "description": "The raw loadavg info ",
          "examples": [
            "0.77 0.93 0.90 10/947 12"
          ]
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.loadavg\"].properties.template",
    "merge": {
      "description": "(Optional) a template for the human-readable output"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.read-file\"]",
    "merge": {
      "description": "Read a file from the filesystem",
      "examples": [
        {
          "collect": {"v1": [{"os.read-file": {
            "output_dir": "/files/etc/bigtool-conf",
            "filepath": "/etc/bigtool.conf"
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "bigtool.conf",
          "description": "The file contents",
          "examples": [
            "{\"setting1\": true, \"setting2\": false}"
          ]
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.read-file\"].properties.filepath",
    "merge": {
      "description": "The file path on the host. If running Support Bundle via docker, this will work, but symlinks are not supported"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.run-command\"]",
    "merge": {
      "description": "Run a command. Will be run in the support bundle container if `docker run replicated/support-bundle` is used. To run in a custom container, use `docker.run` instead",
      "examples": [
        {
          "collect": {"v1": [{"os.run-command": {
            "output_dir": "/system/commands/ping-google",
            "name": "date"
          }}]}
        },
        {
          "collect": {"v1": [{"os.run-command": {
            "output_dir": "/system/commands/ping-google",
            "name": "cat",
            "args": [
              "/etc/os-release"
            ]
          }}]}
        }
      ],
      "_ext_outputs": [
        {
          "path": "stderr",
          "description": "The standard error of the command",
          "examples": [
            "Usage: ping [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface]\n [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos]\n [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option]\n [-w deadline] [-W timeout] [hop1 ...] destination"
          ]
        },
        {
          "path": "stdout",
          "description": "The standard output of the command",
          "examples": [
            "PING google.com (172.217.11.78) 56(84) bytes of data.\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=1 ttl=54 time=203 ms\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=2 ttl=54 time=28.0 ms\n 64 bytes from lax17s34-in-f14.1e100.net (172.217.11.78): icmp_seq=3 ttl=54 time=130 ms\n"
          ]
        }
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.run-command\"].properties.args",
    "merge": {
      "description": "The command arguments"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.run-command\"].properties.dir",
    "merge": {
      "description": "The working directory of the command"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.run-command\"].properties.env",
    "merge": {
      "description": "Specifies additional environment variables"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.run-command\"].properties.name",
    "merge": {
      "description": "The command to run"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.uptime\"]",
    "replace": {
      "required": [
        "output_dir"
      ]
    },
    "merge": {
      "description": "Collect information about the system's uptime",
      "examples": [
        {
          "collect": {"v1": [{"os.uptime": {
            "output_dir": "/system/uptime"
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "contents", "description": "The contents of the uptime file"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"os.uptime\"].properties.template",
    "merge": {
      "description": "Template for the human-readable output"
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"]",
    "replace": {
      "required": [
        "output_dir",
        "api_token",
        "api_endpoint",
        "project_id"
      ]

    },
    "merge": {
      "description": "Collect Audit Log events from a running Retraced instance",
      "examples": [
        {
          "collect": {"v1": [{"retraced.events": {
            "output_dir": "/audit/events",
            "api_endpoint": "https://auditlogs.mycorp.internal:8080",
            "api_token": "aef342f32f22f3edf1f1f3f3ef",
            "project_id": "f3edf1f1f3f3efaef342f32f22"
          }}]}
        },
        {
          "collect": {"v1": [{"retraced.events": {
            "output_dir": "/audit/events",
            "api_endpoint": "https://auditlogs.mycorp.internal:8080",
            "api_token": "aef342f32f22f3edf1f1f3f3ef",
            "project_id": "f3edf1f1f3f3efaef342f32f22",
            "insecure": true,
            "timeout_seconds": 10,
            "mask": {
              "Action": true,
              "Description": true,
              "ActorID": true,
              "ActorName": true,
              "CanonicalTime": true
            },
            "query": {
              "CRUD": "c,u,d"
            }
          }}]}
        }
      ],
      "_ext_outputs": [
        {"path": "audit_events.csv", "description": "The audit events in CSV format"}
      ]
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.api_endpoint",
    "merge": {
      "description": "The location of the Audit Logs API endpoint in the form `http(s)://<host>:<port>`"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.api_token",
    "merge": {
      "description": "An API token for communicating with the audit log instance"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.insecure",
    "merge": {
      "description": "Set to `true` to skip SSL verification on the endpoint"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.project_id",
    "merge": {
      "description": "The Audit Log Project ID"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.query",
    "merge": {
      "description": "A structured query for filtering events, as in https://github.com/retracedhq/retraced-go/blob/master/graphql.go#L16"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.collect.properties.v1.items.properties[\"retraced.events\"].properties.mask",
    "merge": {
      "description": "A mask to determine what fields to include in the output file, as in https://github.com/retracedhq/retraced-go/blob/master/graphql.go#L160"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties",
    "merge": {
      "specs": { "$ref": "#/properties/collect/properties/v1" }
    }
  },


  {
    "path": "properties.analyze",
    "merge": {
      "description": "A list of analyzers to run on the collect spec"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1",
    "merge": {
      "description": "The v1alpha1 analyze definition"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items",
    "merge": {
      "description": "A list of analyzers to run on the collect spec"
    },
    "replace": {
      "required": []
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.message",
    "merge": {
      "description": "Optionally override the default analyzer message"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.severity",
    "merge": {
      "description": "Optionally override the default severity"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.collect_refs",
    "merge": {
      "description": "Reference to a collect spec"
    },
    "examples": [
      {
        "collect_refs": [{
          "ref": "k8sResourceNodes",
          "selector": {"analyze": "kubernetes-resource-list-nodes"}
        }]
      },
      {
        "collect_refs": [{
          "ref": "k8sVersion",
          "name": "kubernetes-version"
        }]
      }
    ]
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.collect_refs.items.properties.ref",
    "merge": {
      "description": "Used internally"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.collect_refs.items.properties.name",
    "merge": {
      "description": "Selector to reference the meta.name of a collect spec"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.collect_refs.items.properties.selector",
    "delete": [
      "properties"
    ],
    "merge": {
      "description": "Selector to reference the meta.labels of a collect spec",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      }
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.meta",
    "merge": {
      "description": "Can be used to organize and identify analyze elements"
    },
    "examples": [
      {
        "meta": {
          "name": "kubernetes-version",
          "labels": {
            "source": "kubernetes"
          }
        }
      }
    ]
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.meta.properties.labels",
    "delete": [
      "properties"
    ],
    "merge": {
      "description": "Key,value pairs used to organize and identify analyze elements",
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      }
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties.meta.properties.name",
    "delete": [
      "properties"
    ],
    "merge": {
      "description": "Name used to organize and identify analyze elements"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties[\"kubernetes.total-memory\"]",
    "replace": {
      "required": [
        "minimum"
      ]
    },
    "merge": {
      "description": "Check that the total memory for a cluster meets the required minimum",
      "examples": [
        {
          "analyze": {"v1alpha1": [{
            "kubernetes.total-memory": {
              "minimum": "20Gi"
            },
            "collect_refs": [
              {"selector": {"analyze": "kubernetes-resource-list-nodes"}}
            ]
          }]}
        }
      ]
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties[\"kubernetes.total-memory\"].properties.minimum",
    "merge": {
      "description": "The minimum total memory requirement"
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties[\"kubernetes.version\"]",
    "merge": {
      "description": "Check that the total memory for a cluster meets the required minimum",
      "examples": [
        {
          "analyze": {"v1alpha1": [{
            "kubernetes.version": {
              "semver_minimum": "1.10.0"
            },
            "collect_refs": [
              {"selector": {"analyze": "kubernetes-version"}}
            ]
          }]}
        }
      ]
    }
  },
  {
    "path": "properties.analyze.properties.v1alpha1.items.properties[\"kubernetes.version\"].properties.semver_minimum",
    "merge": {
      "description": "The minimum kubernetes version"
    }
  },


  { "comment": "last step -- delete internal spec types"},
  {
    "path": "properties.collect.properties.v1.items.properties",
    "delete": [
      "meta.customer",
      "version"
    ]
  }
]
